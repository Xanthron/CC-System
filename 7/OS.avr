for key, value in pairs({ ["os/api/ui/uiManager.lua"] = "ui.uiManager= {}function ui.uiManager.new(x,y,w,h)local this=ui.element.new(nil,\"uiManager\",x,y,w,h)this.parallelManager=ui.parallelManager.new()this.selectionManager=ui.selectionManager.new()this._event=ui.event.new()this.getCursorPos=nil\nthis._callFunction=nil\nthis._exit=false\nfunction this:draw()local x,y,w,h=self:getSimpleMaskRect()self:doDraw(self.buffer,x,y,w,h)self.buffer:draw(x,y,w,h)end\nfunction this._execute()while true do\nif this.getCursorPos then\nlocal blinking,posX,posY,textColor=this.getCursorPos()if blinking==nil then\nthis.getCursorPos=nil\nelse\nterm.setCursorPos(posX,posY)term.setCursorBlink(blinking)if textColor and term.isColor()then\nterm.setTextColor(textColor)end\nend\nend\nthis._event:pull()term.setCursorBlink(false)local eventName=this._event.name\nif\neventName==\"mouse_click\"or eventName==\"mouse_up\"or eventName==\"mouse_drag\"or\neventName==\"monitor_touch\"then\nlocal element=this:doPointerEvent(this._event,this:getSimpleMaskRect())if#this.selectionManager.groups>0 then\nthis.selectionManager:mouseEvent(this._event,element)end\nelse\nif not this:doNormalEvent(this._event)then\nif eventName==\"key\"or eventName==\"key_up\"then\nif#this.selectionManager.groups>0 then\nthis.selectionManager:keyEvent(this._event)end\nend\nend\nend\nend\nend\nfunction this:callFunction(func)self.parallelManager:stop()self._callFunction=func\nend\nfunction this:exit()self.parallelManager:stop()self._exit=true\nend\nfunction this:execute()while this._exit==false do\nthis.parallelManager:init()if this._callFunction then\nthis._callFunction()this._callFunction=nil\nend\nend\nthis.exit=true\nend\nthis.parallelManager:addFunction(this._execute)return this\nend\n",["os/api/ui/_ui.lua"] = "ui= {}\n",["os/sys/execute.lua"] = "local set= ...table.checkType(set,\"file\",\"string\",true)table.checkType(set,\"args\",\"table\",false)table.checkType(set,\"select\",\"boolean\",true)local function getFilesWithName(path,name,tab)local paths=fs.list(path)for key,value in pairs(paths)do\nlocal newPath=path..\"/\" ..value\nif path==\"\"then\nnewPath=value\nend\nif fs.isDir(newPath)then\ngetFilesWithName(newPath,name,tab)elseif value==name then\ntable.insert(tab,newPath)end\nend\nend\nlocal function getErrorText(text)local startI,endI=text:find(\":[0-9]+:\")local file,message,line,possibleFiles=\"\",text,\"\", {}if endI then\nfile=text:sub(0,startI-1)line=text:sub(startI+1,endI-1)message=text:sub(endI+2)end\nreturn message,file,line,possibleFiles\nend\nlocal function getFallBackInfo()local _,message,file,line\n_,message=pcall(function()error(\" \",5)end)message,file,line=getErrorText(message)if file==\"bios.lua\"then\n_,message=pcall(function()error(\" \",9)end)message,file,line=getErrorText(message)end\nreturn file,line\nend\nlocal _file,_line,errorLevel=getFallBackInfo()local function errorHandler(text)local w,h=term.getSize()local possibleFiles= {}local message,file,line=getErrorText(text)if file~=\"\"and file==\"execute.lua\"then\nfile=_file\nline=_line\nend\nif file~=\"\"then\nmessage=string.format(\"[tc=red]%s[tc=clear]\\n\\n%s\\n%s\\n\\n\",message,file,line)local possibleFiles= {}getFilesWithName(\"\",file,possibleFiles)if#possibleFiles==0 then\nmessage=message..\"File could not be found.\"elseif#possibleFiles==1 then\nmessage=message..\"Full path:\\n\" ..possibleFiles[1]else\nmessage=message..\"Multiple files could be found:\\n\" ..table.concat(possibleFiles,\"\\n\")end\nmessage=message..\"\\n\\n\\n[tc=gray]\" ..debug.traceback()end\ncallfile(\"os/sys/infoBox.lua\", {label=\"Error\",text=message,x=3,y=3,w=w-4,h=h-4,button1=\"Ok\",select=set.select})end\nlocal function executionHandler()term.setCursorPos(1,1)if term.isColor()then\nterm.setBackgroundColor(colors.black)term.setTextColor(colors.white)end\nterm.clear()local button,select=callfile(set.file,table.unpack(set.args))return select\nend\nlocal ret= {xpcall(executionHandler,errorHandler)}return table.unpack(ret)\n",["os/api/ui/slider.lua"] = "ui.slider= {}function ui.slider.new(parent,orientation,startValue,endValue,size,style,x,y,w,h,key)local this=ui.element.new(parent,\"slider\",x,y,w,h,key)this.style=style\nthis.orientation=orientation\nthis._pressedButton=0\nthis.repeatItem=ui.repeatItem.new(0.8,0.05,0.7)this.startValue=startValue\nthis.endValue=endValue\nthis.size=size\nthis.value=startValue\nthis._repeatButtonPressElement=ui.parallelElement.new(function(data)while true do\nif this.mode==4 and this.repeatItem:call() ==true then\nif this._pressedButton==1 then\nif this.onValueChange then\nthis.onValueChange(-1)end\nelse\nif this.onValueChange then\nthis.onValueChange(1)end\nend\nend\nsleep(0)end\nend)this.onValueChange=nil\nfunction this:recalculate()local buffer=self.buffer\nlocal theme= {}local mode=self.mode\nif mode==2 then\ntheme=self.style.dTheme\nelse\ntheme=self.style.nTheme\nend\nlocal totalSize=self.endValue-self.startValue\nlocal value=math.max(0, (self.value) /math.max(1, (self.endValue-self.size)))if self.orientation==1 then\nlocal height=self.buffer.rect.h\nlocal barHeight\nlocal offset\nif totalSize<=self.size then\nbarHeight=height-2\noffset=1\nelse\nbarHeight=math.max(1,math.min(math.floor(size/ (totalSize+self.startValue) * (height-2)),height-math.min(4,totalSize-size+2)))offset=math.max(0,math.floor((height-3-barHeight) *value)) +1\nif value>0 then\noffset=offset+1\nend\nend\nlocal width= #theme.sliderT\nif self.buffer.rect.w~=width then\nend\nlocal index=1\nif mode==2 or value==0 then\nfor i=1,width do\nbuffer.text[index] =theme.buttonP.dTheme.t[i]buffer.textColor[index] =theme.buttonP.dTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.dTheme.tBG[i]index=index+1\nend\nelse\nif self._pressedButton==1 and self.mode==4 then\nfor i=1,width do\nbuffer.text[index] =theme.buttonP.sTheme.t[i]buffer.textColor[index] =theme.buttonP.sTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.sTheme.tBG[i]index=index+1\nend\nelse\nfor i=1,width do\nbuffer.text[index] =theme.buttonP.nTheme.t[i]buffer.textColor[index] =theme.buttonP.nTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.nTheme.tBG[i]index=index+1\nend\nend\nend\nfor i=2,self.buffer.rect.h-1 do\nfor j=1,width do\nif i>offset and i<=offset+barHeight then\nbuffer.text[index] =theme.sliderT[j]buffer.textColor[index] =theme.sliderTC[j]buffer.textBackgroundColor[index] =theme.sliderTBG[j]index=index+1\nelse\nbuffer.text[index] =theme.handleL[j]buffer.textColor[index] =theme.handleLC[j]buffer.textBackgroundColor[index] =theme.handleLBG[j]index=index+1\nend\nend\nend\nif mode==2 or value==1 or totalSize-self.size<=0 then\nfor i=1,width do\nbuffer.text[index] =theme.buttonN.dTheme.t[i]buffer.textColor[index] =theme.buttonN.dTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.dTheme.tBG[i]index=index+1\nend\nelse\nif self._pressedButton==2 and self.mode==4 then\nfor i=1,width do\nbuffer.text[index] =theme.buttonN.sTheme.t[i]buffer.textColor[index] =theme.buttonN.sTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.sTheme.tBG[i]index=index+1\nend\nelse\nfor i=1,width do\nbuffer.text[index] =theme.buttonN.nTheme.t[i]buffer.textColor[index] =theme.buttonN.nTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.nTheme.tBG[i]index=index+1\nend\nend\nend\nelse\nlocal width=self.buffer.rect.w\nlocal barWidth\nlocal offset\nif totalSize<=self.size then\nbarWidth=width-2\noffset=1\nelse\nbarWidth=math.max(1,math.min(math.floor(size/ (totalSize+self.startValue) * (width-2)),width-math.min(4,totalSize-size+2)))offset=math.max(0,math.floor((width-3-barWidth) *value)) +1\nif value>0 then\noffset=offset+1\nend\nend\nlocal height= #theme.sliderT\nif self.buffer.rect.h~=height then\nend\nlocal index=1\nif mode==2 or value==0 then\nfor i=1,height do\nbuffer.text[index] =theme.buttonP.dTheme.t[i]buffer.textColor[index] =theme.buttonP.dTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.dTheme.tBG[i]index=index+width\nend\nelse\nif self._pressedButton==1 and self.mode==4 then\nfor i=1,height do\nbuffer.text[index] =theme.buttonP.sTheme.t[i]buffer.textColor[index] =theme.buttonP.sTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.sTheme.tBG[i]index=index+width\nend\nelse\nfor i=1,height do\nbuffer.text[index] =theme.buttonP.nTheme.t[i]buffer.textColor[index] =theme.buttonP.nTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonP.nTheme.tBG[i]index=index+width\nend\nend\nend\nindex=2\nfor i=2,width-1 do\nfor j=1,height do\nif i>offset and i<=offset+barWidth then\nbuffer.text[index] =theme.sliderT[j]buffer.textColor[index] =theme.sliderTC[j]buffer.textBackgroundColor[index] =theme.sliderTBG[j]index=index+width\nelse\nbuffer.text[index] =theme.handleL[j]buffer.textColor[index] =theme.handleLC[j]buffer.textBackgroundColor[index] =theme.handleLBG[j]index=index+width\nend\nindex=i+j\nend\nend\nif mode==2 or value==1 or totalSize-self.size<=0 then\nfor i=1,height do\nbuffer.text[index] =theme.buttonN.dTheme.t[i]buffer.textColor[index] =theme.buttonN.dTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.dTheme.tBG[i]index=index+width\nend\nelse\nif self._pressedButton==2 and self.mode==4 then\nfor i=1,height do\nbuffer.text[index] =theme.buttonN.sTheme.t[i]buffer.textColor[index] =theme.buttonN.sTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.sTheme.tBG[i]index=index+width\nend\nelse\nfor i=1,height do\nbuffer.text[index] =theme.buttonN.nTheme.t[i]buffer.textColor[index] =theme.buttonN.nTheme.tC[i]buffer.textBackgroundColor[index] =theme.buttonN.nTheme.tBG[i]index=index+width\nend\nend\nend\nend\nend\nfunction this:pointerEvent(event,x,y,w,h)local rectX,rectY,rectW,rectH=self:getGlobalRect()x,y,w,h=ui.rect.overlaps(x,y,w,h,rectX,rectY,rectW,rectH)if self.orientation==1 then\nif event.name==\"mouse_click\"then\nif event.param2>=x and event.param2<x+w then\nif y==rectY and event.param3==y then\nself.mode=4\nself._pressedButton=1\nself:recalculate()self:repaint(\"this\",x,y,w,h)self:getManager().parallelManager:addFunction(self._repeatButtonPressElement)return self\nelseif y+h==rectY+rectH and event.param3==y+h-1 then\nself.mode=4\nself._pressedButton=2\nself:recalculate()self:repaint(\"this\",x,y,w,h)self:getManager().parallelManager:addFunction(self._repeatButtonPressElement)return self\nelseif event.param3>y and event.param3<y+h-1 then\nself.mode=4\nlocal newPos=event.param3-rectY-1\nlocal totalSize=self.endValue-self.startValue\nlocal newValue=math.floor((newPos/ (rectH-3)) * (totalSize-self.size+self.startValue))self.onValueChange(newValue-self.value)return self\nend\nend\nelseif event.name==\"mouse_drag\"then\nif event.param2>=x and event.param2<x+w and self.mode==3 and((self._pressedButton==1 and event.param3==y)or(self._pressedButton==2 and event.param3==y+h-1))then\nself.mode=4\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nelseif self.mode==4 then\nif self._pressedButton==0 then\nlocal newPos=math.max(0,math.min(rectH-2,event.param3-rectY-1))local totalSize=self.endValue-self.startValue\nlocal newValue=math.floor((newPos/ (rectH-3)) * (totalSize-self.size+self.startValue))self.onValueChange(newValue-self.value)return self\nelse\nself.mode=3\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nend\nend\nelseif event.name==\"mouse_up\"then\nif self.mode==3 or self.mode==4 then\nself.mode=1\nself:recalculate()self:repaint(\"this\",x,y,w,h)self.repeatItem:reset()self:getManager().parallelManager:removeFunction(self._repeatButtonPressElement)self._pressedButton=0\nreturn self\nend\nend\nelse\nif event.name==\"mouse_click\"then\nif event.param3>=y and event.param3<y+h then\nif x==rectX and event.param2==x then\nself.mode=4\nself._pressedButton=1\nself:recalculate()self:repaint(\"this\",x,y,w,h)self:getManager().parallelManager:addFunction(self._repeatButtonPressElement)return self\nelseif x+w==rectX+rectW and event.param2==x+w-1 then\nself.mode=4\nself._pressedButton=2\nself:recalculate()self:repaint(\"this\",x,y,w,h)self:getManager().parallelManager:addFunction(self._repeatButtonPressElement)return self\nelseif event.param2>x and event.param2<x+w-1 then\nself.mode=4\nlocal newPos=event.param2-rectX-1\nlocal totalSize=self.endValue-self.startValue\nlocal newValue=math.floor((newPos/ (rectW-3)) * (totalSize-self.size+self.startValue))self.onValueChange(newValue-self.value)return self\nend\nend\nelseif event.name==\"mouse_drag\"then\nif event.param3>=y and event.param3<y+h and self.mode==3 and((self._pressedButton==1 and event.param2==x)or(self._pressedButton==2 and event.param2==x+w-1))then\nself.mode=4\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nelseif self.mode==4 then\nif self._pressedButton==0 then\nlocal newPos=math.max(0,math.min(rectW-2,event.param2-rectX-1))local totalSize=self.endValue-self.startValue\nlocal newValue=math.floor((newPos/ (rectW-3)) * (totalSize-self.size+self.startValue))self.onValueChange(newValue-self.value)return self\nelse\nself.mode=3\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nend\nend\nelseif event.name==\"mouse_up\"then\nif self.mode==3 or self.mode==4 then\nself.mode=1\nself:recalculate()self:repaint(\"this\",x,y,w,h)self.repeatItem:reset()self:getManager().parallelManager:removeFunction(self._repeatButtonPressElement)self._pressedButton=0\nreturn self\nend\nend\nend\nend\nthis:recalculate()return this\nend\n",["os/api/core/class.lua"] = "class= {}function class.new(class)local this= {}this.hasClass=true\nthis._classes= {}function this:isClass(class)if class.isClass==true then\nclass=class:getName()end\nif type(class) ==\"string\"then\nfor i=1, #self._classes do\nif self._classes[i] ==class then\nreturn true\nend\nend\nelse\nerror(\"object or string expected to compare class to object\",2)end\nreturn false\nend\nfunction this:isType(class)if class.isClass==true then\nreturn self:getName() ==class:getName()elseif type(class) ==\"string\"then\nreturn self:getName() ==class\nelse\nerror(\"object or string expected to compare class to object\",2)end\nreturn false\nend\nfunction this:_addType(class)table.insert(self._classes,class)end\nfunction this:getName()return self._classes[#self._classes]end\nthis:_addType(class)return this\nend\n",["os/sys/browser/data/settings.set"] = "return{official=\"ZbWvc7x9\"\n}\n",["os/sys/explorer/extensions/lua"] = "return{{\"[\",\"L\",\"]\"}, {colors.lightBlue,colors.white,colors.lightBlue}, {colors.blue,colors.blue,colors.blue},\"rom/programs/edit.lua\",false}\n",["os/sys/browser/require.lua"] = "local args= {...}local official,unofficial\nlocal function downloadScreen(...)callfile(\"os/sys/wait.lua\",\"Downloading\", ...)end\nlocal function doData(data)local s,c\nif data.path==\"run\"then\nif data.url:len() ==8 then\ns,c=www.pasteBinRun(data.url)else\ns,c=www.run(data.url)end\nelse\nif data.url:len() ==8 then\ns,c=www.pasteBinSave(data.url,data.path,true)else\ns,c=www.save(data.url,data.path,true)end\nend\nif s then\ncallfile(\"os/sys/browser/install.lua\",1,data)end\nreturn s\nend\nlocal function doItem(name)for i=1, #official do\nif official[i].name==name then\ndoData(official[i])return\nend\nend\nfor i=1, #unofficial do\nif unofficial[i].name==name then\ndoData(unofficial[i])return\nend\nend\nend\ndownloadScreen(function()official,unofficial=dofile(\"os/sys/browser/getList.lua\")for i=1, #args do\ndoItem(args[i])end\nend)\n",["os/sys/browser/info.lua"] = "local data= ...local _x,_y,_w,_h=1,1,term.getSize()local function downloadScreen(...)callfile(\"os/sys/wait.lua\",\"Downloading\", ...)end\nlocal manager=ui.uiManager.new(_x,_y,_w,_h)ui.buffer.fill(manager.buffer,\" \",colors.white,colors.white)local types= {}if data.type:find(\"d\")then\ntable.insert(types,\"Desktop\")end\nif data.type:find(\"t\")then\ntable.insert(types,\"Turtle\")end\nif data.type:find(\"p\")then\ntable.insert(types,\"Pocket\")end\nif#types==0 then\ntable.insert(types,\"Desktop\")table.insert(types,\"Turtle\")table.insert(types,\"Pocket\")end\nif data.color then\ntable.insert(types,\"Color\",1)end\nlocal versionText=table.concat(data.version or{\"No Version\"},\".\")if data.versionOld then\nversionText=versionText..\" (\" ..table.concat(data.versionOld,\".\") ..\")\"end\nlocal tBox_info=ui.textBox.new(manager,\"\", (\"%s\\n\\nCategory:\\n%s\\n\\nType:\\n%s\\n\\nVersion:\\n%s\\n\\nSource:\\n%s\"):format(IF(data.description and data.description~=\"\",data.description,\"No Description.\"),IF(data.category and data.category~=\"\",data.category,\"Non.\"),table.concat(types,\", \"),versionText,data.url),theme.tBox2,_x,_y,_w,_h)local label_title=ui.label.new(tBox_info,data.name,theme.label1,1,1,_w-3,1)local button_exit=ui.button.new(tBox_info,\"<\",theme.button2,_w-2,1,3,1)local label_bottom=ui.label.new(tBox_info,\"\",theme.label1,1,_h,_w,1)local button_delete=ui.button.new(tBox_info,\"Delist\",theme.button1,1,_h,8,1)if not data.delete then\nbutton_delete.mode=2\nbutton_delete:recalculate()end\nlocal button_remove=ui.button.new(tBox_info,\"Delete\",theme.button1,_w-16,_h,8,1)local type_do=\"Install\"if data.status==1 then\ntype_do=\"Update\"elseif data.status==2 then\ntype_do=\"Restore\"else\nbutton_remove.mode=2\nbutton_remove:recalculate()end\nlocal button_do=ui.button.new(tBox_info,type_do,theme.button1,_w-type_do:len() -1,_h,type_do:len() +2,1)local group_menu=manager.selectionManager:addNewGroup()local group_tBox=tBox_info.selectionGroup\nmanager.selectionManager:addGroup(group_tBox)group_menu:addElement(button_delete,nil,nil,button_exit,group_tBox)group_menu:addElement(button_exit,button_delete,nil,nil,group_tBox)group_tBox:addElement(button_delete,nil,group_menu,button_do,nil)group_tBox:addElement(button_do,button_delete,group_menu,nil,nil)group_menu.current=button_exit\nmanager.selectionManager:select(button_do,\"code\",3)function button_exit:onClick(event)manager:exit()end\nfunction button_delete:onClick(event)manager:callFunction(function()local path=\"os/sys/browser/data/unofficial\"local list=dofile(path)for i,v in ipairs(list)do\nif v.name==data.name then\ntable.remove(list,i)break\nend\nend\ntable.save(list,path)callfile(\"os/sys/infoBox.lua\", {label=\"Information\",text=data.name..\" is now deleted from the unofficial download list\",x=_x+2,y=_y+2,w=_w-4,h=_h-4,button1=\"Ok\",select=event.name~=\"mouse_up\"})manager:exit()end)end\nfunction button_remove:onClick(event)manager:callFunction(function()local delete=data.deleteOld or data.delete\nif type(delete) ==\"table\"then\nfor i,v in ipairs(delete)do\nif fs.exists(v)then\nfs.delete(v)end\nend\nelse\nif fs.exists(delete)then\nfs.delete(delete)end\nend\ncallfile(\"os/sys/browser/install.lua\",2,data)callfile(\"os/sys/infoBox.lua\", {label=\"Information\",text=data.name..\" is now deleted from the system.\",x=_x+2,y=_y+2,w=_w-4,h=_h-4,button1=\"Ok\",select=event.name~=\"mouse_up\"})manager:exit()end)end\nfunction button_do:onClick(event)manager:callFunction(function()local success,content,text\nlocal needsReboot=false\ndownloadScreen(function()if data.path==\"run\"then\nlocal reboot=os.reboot\nos.reboot=function()needsReboot=true\nend\nif data.url:len() ==8 then\nsuccess,content=www.pasteBinRun(data.url)else\nsuccess,content=www.run(data.url)end\ntext= (\"%s has now run.\\n\"):format(data.name)if needsReboot then\ntext=text..\"System needs a reboot.\"end\nos.reboot=reboot\nelse\nif data.url:len() ==8 then\nsuccess,content=www.pasteBinSave(data.url,data.path,true)else\nsuccess,content=www.save(data.url,data.path,true)end\ntext= (\"%s is now installed to the system.\\n\\nPath:\\n%s\\n\"):format(data.name,data.path)end\nend)if success then\ncallfile(\"os/sys/browser/install.lua\",1,data)callfile(\"os/sys/infoBox.lua\", {label=\"Information\",text=text,x=_x+2,y=_y+2,w=_w-4,h=_h-4,button1=\"Ok\",select=event.name~=\"mouse_up\"})if needsReboot then\nos.reboot()end\nelse\ncallfile(\"os/sys/infoBox.lua\", {label=\"Information\",text=data.name..\" failed to download.\\n\\nReason:\\n\" ..content,x=_x+2,y=_y+2,w=_w-4,h=_h-4,button1=\"Ok\",select=event.name~=\"mouse_up\"})end\nmanager:exit()end)end\nmanager:draw()manager:execute()\n",["os/api/ui/parallelElement.lua"] = "ui.parallelElement= {}function ui.parallelElement.new(func,data)local this= {}this.data=data or{}this.executer=nil\nthis._func=func\nfunction this.init()if this._func(this.data) ==false then\nthis.executer:removeFunction(this)end\nend\nreturn this\nend\n",["os/sys/wait.lua"] = "local args= {...}local var1=args[1]if type(var1) ==\"string\"then\nlocal function func()local x,y=term.getSize()x=math.floor(x/2)y=math.floor(y/2) +2\nlocal pos= {x-1,y-1,x,y-1,x+1,y-1,x+1,y,x+1,y+1,x,y+1,x-1,y+1,x-1,y}local char= {\"o\",\"O\",\"o\"}local step=1\nx=x-math.floor(var1:len() /2)y=y-4\nwhile true do\nif term.isColor()then\nterm.setBackgroundColor(colors.white)term.setTextColor(colors.orange)end\nterm.clear()term.setCursorPos(x,y)term.write(var1)for i=1, #char do\nlocal index= ((step+i) %math.floor(#pos/2) +1) *2-1\nterm.setCursorPos(pos[index],pos[index+1])term.write(char[#char-i+1])end\nstep=step+1\nsleep(0.2)end\nend\nargs[1] =func\nend\nreturn parallel.waitForAny(table.unpack(args))\n",["os/api/ui/padding.lua"] = "_padding_metatable= {__newindex=function(self,key,value)error(\"Please use the given functions to edit Values\",2)end,__tostring=function(self)return \"(\" ..self.left..\", \" ..self.top..\", \" ..self.right..\", \" ..self.bottom..\")\"end,__eq=function(self,padding)return(self.left==padding.left and self.top==padding.top and self.right==padding.right and\nself.bottom==padding.bottom)end,__metatable=false}ui.padding= {}function ui.padding.new(left,top,right,bottom)local this= {left=left or 0,top=top or 0,right=right or 0,bottom=bottom or 0}function this:getUnpacked()return self.left,self.top,self.right,self.bottom\nend\nfunction this:getPaddedRect(x,y,w,h)return x+self.left,y+self.top,w-self.right-self.left,h-self.bottom-self.top\nend\nfunction this:set(left,top,right,bottom)self.left=left or self.left\nself.top=top or self.top\nself.right=right or self.right\nself.bottom=bottom or self.bottom\nend\nsetmetatable(this,_padding_metatable)return this\nend\n",["os/api/ui/scrollView.lua"] = "ui.scrollView= {}function ui.scrollView.new(parent,label,mode,style,x,y,w,h,key)local this=ui.element.new(parent,\"scrollView\",x,y,w,h,key)this.label=label\nthis.style=style\nthis.stylePadding=ui.padding.new(#style.nTheme.b[4], #style.nTheme.b[2], #style.nTheme.b[5], #style.nTheme.b[7])ui.element.new(this,\"container\",this.stylePadding:getPaddedRect(this.buffer.rect:getUnpacked()))ui.element.new(this.element[1],\"container\",this.stylePadding:getPaddedRect(this.buffer.rect:getUnpacked()))if mode==1 or mode==3 then\nlocal slideWidth= #style.sliderV.nTheme.handleL\nui.slider.new(this,1,0,0,0,style.sliderV,x+w-math.max(math.ceil((this.stylePadding.right+slideWidth) /2),slideWidth),y+this.stylePadding.top,slideWidth,h-this.stylePadding.top-this.stylePadding.bottom,\"v\")end\nif mode==1 or mode==4 then\nlocal slideHeight= #style.sliderV.nTheme.handleL\nui.slider.new(this,2,0,0,0,x+this.stylePadding.left,y+h-math.max(math.ceil((this.stylePadding.bottom+slideHeight) /2),slideHeight),w-this.stylePadding.left-this.stylePadding.right,slideHeight,\"h\")end\nthis.selectionGroup=ui.selectionGroup.new()this.selectable=false\nthis.scrollWithoutSelection=true\nfunction this:getContainer()return self.element[1].element[1]end\nfunction this:resizeSlider()local cX,cY,cW,cH=self:getContainer():getLocalRect()local sliderV=self.element.v\nif sliderV then\nlocal h=sliderV:getHeight()sliderV.startValue=cY\nsliderV.endValue=cY+cH-1\nsliderV.size=h\nsliderV.value=math.max(0,math.min(cH-h,sliderV.value))sliderV:recalculate()end\nlocal sliderH=self.element.h\nif sliderH then\nlocal w=sliderH:getWidth()sliderH.startValue=cX\nsliderH.endValue=cX+cW-1\nsliderH.size=w\nsliderH.value=math.max(0,math.min(cW-w,sliderH.value))sliderH:recalculate()end\nend\nfunction this:resizeContainer()local container=self:getContainer()local minX,minY,maxX,maxY=nil,nil,0,0\nfor _,v in ipairs(container.element)do\nif v.isVisible==true then\nx,y,w,h=v:getGlobalRect()minX=math.min(minX or x,x)minY=math.min(minY or y,y)maxX=math.max(maxX,x+w)maxY=math.max(maxY,y+h)end\nend\nif minX then\ncontainer.buffer.rect:set(minX,minY,maxX-minX,maxY-minY)end\nself:resizeSlider()end\nfunction this:resetLayout()self.stylePadding:set(#self.style.nTheme.b[4], #self.style.nTheme.b[2], #self.style.nTheme.b[5], #self.style.nTheme.b[7])local x,y,w,h=self:getGlobalRect()local sX,sY,sW,sH=self.stylePadding:getPaddedRect(self.buffer.rect:getUnpacked())self.element[1]:setGlobalRect(sX,sY,sW,sH)local sliderV=self.element.v\nif sliderV then\nsliderV.style=self.style.sliderV\nlocal slideWidth= #self.style.sliderV.nTheme.handleL\nsliderV:setGlobalRect(x+w-math.max(math.ceil((self.stylePadding.right+slideWidth) /2),slideWidth),sY,slideWidth,sH)end\nlocal sliderH=self.element.h\nif sliderH then\nsliderH.style=self.style.sliderH\nlocal slideHeight= #self.style.sliderH.nTheme.handleL\nsliderH:setGlobalRect(x+self.stylePadding.left,y+h-math.max(math.ceil((self.stylePadding.bottom+slideHeight) /2),slideHeight),sW,slideHeight)end\nself:resizeContainer()end\nfunction this:onValueChange(valueX,valueY)local container=self:getContainer()local maxMoveX=0\nif valueX then\nif valueX>0 then\nmaxMoveX=math.max(0,math.min(valueX,container:getLocalPosX() +container:getWidth() - (self:getWidth() -self.stylePadding.right+1)))elseif valueX<0 then\nmaxMoveX=math.min(0,math.max(valueX,container:getLocalPosX() +self.stylePadding.left-1))end\nend\nlocal maxMoveY=0\nif valueY then\nif valueY>0 then\nmaxMoveY=math.max(0,math.min(valueY,container:getLocalPosY() +container:getHeight() - (self:getHeight() -self.stylePadding.bottom+1)))elseif valueY<0 then\nmaxMoveY=math.min(0,math.max(valueY,container:getLocalPosY() +self.stylePadding.top-1))end\nend\nif maxMoveX~=0 or maxMoveY~=0 then\ncontainer:setLocalRect(-maxMoveX, -maxMoveY,nil,nil)if maxMoveX~=0 then\nlocal sliderH=self.element.h\nif sliderH then\nsliderH.value=sliderH.value+maxMoveX\nsliderH:recalculate()end\nend\nif maxMoveY~=0 then\nlocal sliderV=self.element.v\nif sliderV then\nsliderV.value=sliderV.value+maxMoveY\nsliderV:recalculate()end\nend\nself:repaint(\"this\")end\nend\nfunction this._onValueChangeVertical(valueY)this:onValueChange(nil,valueY)end\nfunction this._onValueChangeHorizontal(valueX)this:onValueChange(valueX,nil)end\nfunction this:normalEvent(event)if(self.scrollWithoutSelection or not self.selectable or self.mode==3)and event.name==\"mouse_scroll\"then\nif self.element.v then\nself:onValueChange(nil,event.param1)return this\nelseif self.element.h then\nself:onValueChange(nil,event.param1)return this\nend\nend\nend\nfunction this:pointerEvent(event,x,y,w,h)if event.name==\"mouse_click\"and self.mode~=3 then\nx,y,w,h=ui.rect.overlaps(x,y,w,h,self.buffer.rect:getUnpacked())if event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself:getManager().selectionManager:select(self.selectionGroup,\"mouse\",3)return self\nend\nend\nend\nfunction this:recalculate()local theme\nlocal labelTheme\nif self.mode==1 then\ntheme=self.style.nTheme\nlabelTheme=self.style.label.nTheme\nelseif self.mode==2 then\ntheme=self.style.dTheme\nlabelTheme=self.style.label.dTheme\nelse\ntheme=self.style.sTheme\nlabelTheme=self.style.label.sTheme\nend\nui.buffer.fill(self.buffer,theme.b[5][1],theme.spaceTextColor,theme.spaceBackgroundColor)ui.buffer.borderBox(self.buffer,theme.b,theme.bC,theme.bBG)if self.label then\nui.buffer.labelBox(self.buffer,labelTheme.suffix..self.label..labelTheme.suffix,labelTheme.tC,labelTheme.tBG,self.style.label.align,nil,self.stylePadding.left,0,self.stylePadding.right,self.buffer.rect.h-self.stylePadding.top)end\nend\nfunction this.selectionGroup:listener(eventName,source, ...)if eventName==\"selection_lose_focus\"then\nlocal currentElement,newElement= ...this:changeMode(1)elseif this.selectable and eventName==\"selection_get_focus\"then\nlocal currentElement,newElement= ...if newElement==this or newElement==this.element.v or newElement==this.element.h then\nnewElement=self.current or this:getContainer().element[1]local mode=3\nif source==\"mouse\"then\nmode=1\nend\nif newElement then\nelseif currentElement then\ncurrentElement:changeMode(1)end\nreturn false\nend\nthis:changeMode(3)if newElement and source~=\"mouse\"then\nthis:focusElement(newElement)end\nelseif eventName==\"selection_reselect\"then\nif source==\"key\"then\nlocal element= ...this:focusElement(element)end\nelseif eventName==\"selection_change\"then\nlocal currentElement,newElement= ...if newElement==this or newElement==this.element.v or newElement==this.element.h then\ncurrentElement:changeMode(1)return false\nelseif newElement and source~=\"mouse\"then\nthis:focusElement(newElement)end\nend\nend\nfunction this:clear()local container=self:getContainer()for i=1, #container.element do\ncontainer.element[1]:setParent(nil)end\nlocal index=2\nfor i=2,3 do\nif self.element[i]then\nindex=index+1\nend\nend\nfor i=index, #self.selectionGroup.elements do\nself.selectionGroup.elements[i] =nil\nend\nend\nfunction this:focusElement(element)local x,y,w,h=self.element[1]:getGlobalRect()local eX,eY,eW,eH=element:getGlobalRect()local addW=math.floor(math.max(0,w-eW) /2)local addH=math.floor(math.max(0,h-eH) /2)self:onValueChange(eX-x-addW,eY-y-addH)end\nthis.selectionGroup:addElement(this)if this.element.v then\nthis.element.v.onValueChange=this._onValueChangeVertical\nthis.selectionGroup:addElement(this.element.v)end\nif this.element.h then\nthis.element.h.onValueChange=this._onValueChangeHorizontal\nthis.selectionGroup:addElement(this.element.h)end\nthis:recalculate()return this\nend\n",["os/api/core/textutils.lua"] = "function textutils.serializeCompressed()end\nfunction textutils.getNeatName(path)local name=fs.getName(path)name=name:gsub(\"^[%c%s_]*.\",function(t)return t:sub(t:len() -1):upper()end):gsub(\"%.[^%.]*$\",\"\"):gsub(\"%a[%._]+%a\",function(t)return t:sub(1,1) ..t:sub(t:len()):upper()end):gsub(\"%l%u\",function(t)return t:sub(1,1) ..\" \" ..t:sub(2)end):gsub(\"%a%d\",function(t)return t:sub(1,1) ..\" \" ..t:sub(2)end)return name or \"\"end\nfunction textutils.split(str,separator)local list= {}for part in str:gmatch(separator)do\ntable.insert(list,part)end\nreturn list\nend\n",["os/sys/browser/loader.lua"] = "\nlocal args= ...local _x,_y,_w,_h=1,1,term.getSize()local mode=args.mode\nlocal function loadScreen(label, ...)callfile(\"os/sys/wait.lua\",label, ...)end\nlocal modeName=IF(mode==1,\"Upload\",\"Download\")local manager,index=ui.uiManager.new(_x,_y,_w,_h),nil\nfor i=1,_w*_h do\nif i<=_w or i> (_h-1) *_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.green\nmanager.buffer.textBackgroundColor[i] =colors.green\nelse\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.white\nmanager.buffer.textBackgroundColor[i] =colors.white\nend\nend\nlocal label_title=ui.label.new(manager,modeName..\" File\",theme.label1,1,1,_w-3,1)local button_exit=ui.button.new(manager,\"<\",theme.button2,_w-2,1,3,1)local sView_item=ui.scrollView.new(manager,\"\",3,theme.sView1,1,2,_w,_h-2)local container_item=sView_item:getContainer()local y=2\nlocal iField_code,label_code\nif mode==1 then\nlabel_code=ui.label.new(manager,\"\",theme.label1,1,_h,_w-8,1)else\nlabel_code=ui.label.new(container_item,\"Code:\",theme.label2,1,y,6)iField_code=ui.inputField.new(container_item,nil,\"\",false,theme.iField2,7,y,_w-8,1)y=y+2\nend\nlocal label_file=ui.label.new(container_item,IF(mode==1,\"File Path:\",\"Save Path:\"),theme.label2,1,y,_w-1)y=y+1\nlocal button_path=ui.button.new(container_item,\"Path\",theme.button1,1,y,6,1)local label_path=ui.label.new(container_item,\"No Selection\",theme.label2,8,y,_w-9,1)if args.file then\nbutton_path.mode=2\nlabel_path.text=\"File passed.\"button_path:recalculate()label_path:recalculate()end\ny=y+2\nlocal toggle_toList=ui.toggleButton.new(container_item,\"Add to list\",true,theme.toggle1,1,y,_w-1,1)y=y+1\nlocal label_types=ui.label.new(container_item,\"Types:\",theme.label2,3,y,_w-3,1)y=y+1\nlocal toggle_desktop=ui.toggleButton.new(container_item,\"Desktop\",true,theme.toggle1,3,y,_w-3,1)y=y+1\nlocal toggle_turtle=ui.toggleButton.new(container_item,\"Turtle\",true,theme.toggle1,3,y,_w-3,1)y=y+1\nlocal toggle_pocket=ui.toggleButton.new(container_item,\"Pocket\",true,theme.toggle1,3,y,_w-3,1)y=y+2\nlocal toggle_color=ui.toggleButton.new(container_item,\"Need Color\",false,theme.toggle1,2,y,_w-2,1)y=y+2\nlocal iField_name=ui.inputField.new(container_item,\"Name\",args.name or \"\",false,theme.iField1,3,y,_w-4,3)y=y+4\nlocal iField_version=ui.inputField.new(container_item,\"Version\",args.version or \"\",false,theme.iField1,3,y,_w-4,3)y=y+4\nlocal iField_category=ui.inputField.new(container_item,\"Category\",args.version or \"\",false,theme.iField1,3,y,_w-4,3)y=y+4\nlocal iField_description=ui.inputField.new(container_item,\"Description\",\"\",true,theme.iField1,3,y,_w-4,7)local button_load=ui.button.new(manager,modeName,theme.button1,_w-9,_h,10,1)button_load.mode=2\nbutton_load:recalculate()sView_item:resetLayout()sView_item:recalculate()local group_menu=manager.selectionManager:addNewGroup()manager.selectionManager:addGroup(sView_item.selectionGroup)local group_list=sView_item.selectionGroup\nlocal group_download=manager.selectionManager:addNewGroup()if mode==1 then\ngroup_menu:addElement(button_exit,nil,nil,nil,button_path)group_list:addElement(button_path,nil,button_exit,nil,toggle_toList)else\ngroup_menu:addElement(button_exit,nil,nil,nil,iField_code)group_list:addElement(iField_code,nil,button_exit,nil,button_path)group_list:addElement(button_path,nil,iField_code,nil,toggle_toList)end\ngroup_list:addElement(toggle_toList,nil,button_path,nil,toggle_desktop)group_list:addElement(toggle_desktop,nil,toggle_toList,nil,toggle_turtle)group_list:addElement(toggle_turtle,nil,toggle_desktop,nil,toggle_pocket)group_list:addElement(toggle_pocket,nil,toggle_turtle,nil,toggle_color)group_list:addElement(toggle_color,nil,toggle_pocket,nil,iField_name)group_list:addElement(iField_name,nil,toggle_color,nil,iField_version)group_list:addElement(iField_version,nil,iField_name,nil,iField_category)group_list:addElement(iField_category,nil,iField_version,nil,iField_description)group_list:addElement(iField_description,nil,iField_category,nil,button_load)group_download:addElement(button_load,nil,iField_description,nil,nil)local function checkDownloadButton(codeText,nameText,versionText)if(args.run or args.path)and(toggle_toList._checked==false or((toggle_desktop._checked or toggle_pocket._checked or toggle_turtle._checked)and(nameText or iField_name.text:len() >0)and#textutils.split(versionText or iField_version.text,\"[^%.]+\") ==3))then\nbutton_load.mode=1\nelse\nbutton_load.mode=2\nend\nbutton_load:recalculate()button_load:repaint(\"this\")end\nfunction button_exit:onClick(event)manager:exit()end\nif mode==2 then\nfunction iField_code:onTextEdit(event, ...)if event==\"char\"or event==\"paste\"then\nlocal var1= ...if self.text:len() <8 then\nvar1= (var1:match(\"%w*\")or \"\"):sub(1,8-self.text:len())else\nvar1=\"\"end\nif self.text:len() +var1:len() ==8 then\ncheckDownloadButton(1)else\nbutton_load:changeMode(2)end\nreturn var1\nelseif event==\"delete\"then\nbutton_load:changeMode(2)return true\nend\nend\nend\nfunction button_path:onClick(event)manager:callFunction(function()local changeName=textutils.getNeatName(args.path or \"\") ==iField_name.text or iField_name.text:len() ==0\nlocal path=\"\"if args.path then\npath=fs.getDir(args.path)end\npath=callfile(\"os/sys/explorer/main.lua\",IF(mode==1, {mode=\"select_one\",path=path,edit=false,select=event.name~=\"mouse_up\"}, {mode=\"save\",save=iField_name.text,override=true,path=path,edit=false,select=event.name~=\"mouse_up\"}))if path then\nargs.path=path\nlabel_path.text=path\nlabel_path:recalculate()if changeName then\niField_name:setText(textutils.getNeatName(path))iField_name:recalculate()iField_name:repaint(\"this\")end\nend\ncheckDownloadButton()manager:draw()end)end\nfunction toggle_toList:onToggle(event,checked)local m=2\nif checked then\nm=1\nend\nlabel_types:changeMode(m,true)toggle_desktop:changeMode(m,true)toggle_turtle:changeMode(m,true)toggle_pocket:changeMode(m,true)toggle_color:changeMode(m,true)iField_name:changeMode(m,true)iField_version:changeMode(m,true)iField_category:changeMode(m,true)iField_description:changeMode(m,true)checkDownloadButton()manager:draw()end\nfunction toggle_desktop:onToggle(event,checked)checkDownloadButton()end\nfunction toggle_turtle:onToggle(event,checked)checkDownloadButton()end\nfunction toggle_pocket:onToggle(event,checked)checkDownloadButton()end\nfunction iField_name:onTextEdit(event, ...)if event==\"char\"then\ncheckDownloadButton(nil,1)return...elseif event==\"delete\"then\nif self.text:len() <=1 then\ncheckDownloadButton(nil,0)end\nend\nend\nfunction iField_version:onTextEdit(event, ...)if event==\"char\"then\nlocal c= ...if((c==\".\"and self.text:gsub(\"[^%.]+\",\"\"):len() <2)or tonumber(c) ~=nil)and c~=\"-\"then\ncheckDownloadButton(nil,nil,self.text..c)return c\nend\nreturn \"\"elseif event==\"delete\"then\nif self.text:len() <=1 then\ncheckDownloadButton(nil,nil,self.text:sub(1,self.text:len() -1))end\nend\nend\nfunction button_load:onClick(event)manager:callFunction(function()local success,content,text,code\nif mode==1 then\nlocal fileText\nif args.file then\nfileText=args.file\nelse\nlocal file=fs.open(args.path,\"r\")fileText=file.readAll()file:close()end\nloadScreen(\"Upload\",function()success,content=www.pasteBinPut(fileText)end)if content:len() ~=8 then\nsuccess=false\nend\nif success then\ncode=content\nlabel_code.text=code\nlabel_code:recalculate()text= (\"Uploading from\\n%s\\nto: %s\\n\"):format(args.path or \"Program\",code)else\ntext= (\"Uploading  %s from\\n%s\\n\"):format(args.path)end\nelse\ncode=iField_code.text\nloadScreen(modeName,function()success,content=www.pasteBinSave(code,args.path,true)text= (\"Save %s at\\n%s\\n\"):format(code,args.path)end)end\nif success then\nif toggle_toList._checked then\nlocal types= {}if toggle_desktop._checked then\ntable.insert(types,\"d\")end\nif toggle_turtle._checked then\ntable.insert(types,\"t\")end\nif toggle_pocket._checked then\ntable.insert(types,\"p\")end\nlocal version=textutils.split(iField_version.text,\"[^%.]+\")for i=1, #version do\nversion[i] =tonumber(version[i])end\nlocal data= {name=iField_name.text,description=iField_description.text,color=toggle_color._checked,type=table.concat(types,\"\"),url=code,path=args.path or \"run\",delete=args.path or args.delete,category=iField_category.text,version=version}local datas=dofile(\"os/sys/browser/data/unofficial\")for i,v in ipairs(datas)do\nif v.name==iField_name.text then\ntable.remove(datas,i)break\nend\nend\ntable.insert(datas,data)table.save(datas,\"os/sys/browser/data/unofficial\")callfile(\"os/sys/browser/install.lua\",1,data)end\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text= (\"%sSucceeded\"):format(text),label=modeName,select=true,button1=\"Ok\"})else\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text= (\"%sFailed\\n\\n%s\"):format(text,content),label=modeName,select=true,button1=\"Ok\"})end\nmanager:draw()end)end\nif mode==1 then\nmanager.selectionManager:select(button_path,\"code\",3)else\nmanager.selectionManager:select(iField_code,\"code\",3)end\nmanager:draw()manager:execute()\n",["os/sys/explorer/extensions/folder"] = "return{{\"|\",\"#\",\"|\"}, {colors.orange,colors.orange,colors.orange}, {colors.yellow,colors.yellow,colors.yellow}}\n",["os/api/core/www.lua"] = "www= {}function www._getFileName(url)url=url:gsub(\"[#?].*\",\"\"):gsub(\"/+$\",\"\")return url:match(\"/([^/]+)$\")end\nfunction www.get(url)local ok,err=http.checkURL(url)if not ok then\nreturn false,err or \"Invalid URL.\"end\nlocal response=http.get(url,nil,true)if not response then\nreturn false,\"Failed.\"end\nlocal content=response.readAll()response.close()return true,content\nend\nfunction www._run(content,name, ...)local func,err=load(content,name,\"t\",_ENV)if not func then\nreturn false,err\nend\nlocal ok,err=pcall(func, ...)if not ok then\nreturn false,err\nend\nreturn true\nend\nfunction www.run(url, ...)local success,content=www.get(url)if success then\nreturn www._run(content,www._getFileName(url), ...)else\nreturn false,content\nend\nend\nfunction www._save(content,path,override)local name=fs.getName(path)local path=path:match(\"^.*/?\")if fs.exists(path)and not override then\nreturn false,\"File already exists.\"end\nlocal file=fs.open(path,\"wb\")file.write(content)file.close()return true\nend\nfunction www.save(url,path,override)local success,content=www.get(url)if not success then\nreturn false,content\nend\nreturn www._save(content,path,override)end\nfunction www.pasteBinGet(url)local patterns= {\"^([%a%d]+)$\",\"^https?://pastebin.com/([%a%d]+)$\",\"^pastebin.com/([%a%d]+)$\",\"^https?://pastebin.com/raw/([%a%d]+)$\",\"^pastebin.com/raw/([%a%d]+)$\"\n}local code\nfor i=1, #patterns do\ncode=url:match(patterns[i])if code then\nbreak\nend\nend\nif not code then\nreturn false,\"No code found.\"end\nlocal response,err=http.get((\"https://pastebin.com/raw/%s?cb=%x\"):format(textutils.urlEncode(code),math.random(0,2^30)))if not response then\nreturn false,err or \"Failed.\"end\nlocal headers=response.getResponseHeaders()if not headers[\"Content-Type\"]or not headers[\"Content-Type\"]:find(\"^text/plain\")then\nreturn false,\"Pastebin block\"end\nlocal content=response.readAll()response.close()return true,content\nend\nfunction www.pasteBinRun(url)local success,content=www.pasteBinGet(url)if success then\nreturn www._run(content,www._getFileName(url))else\nreturn false,content\nend\nend\nfunction www.pasteBinSave(url,path,override)local success,content=www.pasteBinGet(url)if success then\nreturn www._save(content,path,override)else\nreturn false,content\nend\nend\nfunction www.pasteBinPut(text)local key=\"0ec2eb25b6166c0c27a394ae118ad829\"local response=http.post(\"https://pastebin.com/api/api_post.php\",\"api_option=paste&\" ..\"api_dev_key=\" ..key..\"&\" ..\"api_paste_format=lua&\" ..\"api_paste_name=\" ..textutils.urlEncode(\"file\") ..\"&\" ..\"api_paste_code=\" ..textutils.urlEncode(text))if response then\nlocal responseText=response.readAll()response.close()local code=string.match(responseText,\"[^/]+$\")return true,code\nelse\nreturn false,\"Failed.\"end\nend\n",["os/main.lua"] = "local _x,_y,_w,_h=1,1,term.getSize()local files\nlocal function loadFiles()files= {}local path=\"os/programs\"local list=fs.list(path)for _,v in ipairs(list)do\nlocal path=fs.combine(path,v)if fs.isDir(path)then\nlocal main=fs.combine(path,\"main.lua\")if fs.exists(main)then\nlocal success,data\nfs.doFile(fs.combine(path,\"start.lua\"))table.insert(files, {path=main,name=textutils.getNeatName(path),data=data or{}})end\nelse\ntable.insert(files, {path=path,name=textutils.getNeatName(path),data= {}})end\nend\nend\nlocal function createEntry(sView,file,func1,func2,x,y,w,h)local container=sView:getContainer()local button_item=ui.button.new(container,file.name,theme.button3,x,y,w-6,h)local button_info=ui.button.new(container,\"i\",theme.button3,x+w-6,y,3,h)local element=ui.element.new(container,\"image\",x+w-3,y,3,h)local startup,enter,argument=false,true,false\nif file.data then\nstartup=file.startup or false\nenter=file.enter or false\nargument=file.argument or false\nend\nlocal buffer=element.buffer\nif startup then\nbuffer.text[1] =\"s\"buffer.textColor[1] =colors.black\nbuffer.textBackgroundColor[1] =colors.lime\nelse\nif term.isColor()then\nbuffer.text[1] =\"s\"buffer.textColor[1] =colors.lightGray\nbuffer.textBackgroundColor[1] =colors.gray\nelse\nbuffer.text[1] =\" \"buffer.textColor[1] =colors.white\nbuffer.textBackgroundColor[1] =colors.black\nend\nend\nif enter then\nbuffer.text[2] =\"e\"buffer.textColor[2] =colors.white\nbuffer.textBackgroundColor[2] =colors.blue\nelse\nif term.isColor()then\nbuffer.text[2] =\"e\"buffer.textColor[2] =colors.lightGray\nbuffer.textBackgroundColor[2] =colors.gray\nelse\nbuffer.text[2] =\" \"buffer.textColor[2] =colors.white\nbuffer.textBackgroundColor[2] =colors.black\nend\nend\nif argument then\nbuffer.text[3] =\"a\"buffer.textColor[3] =colors.red\nbuffer.textBackgroundColor[3] =colors.yellow\nelse\nif term.isColor()then\nbuffer.text[3] =\"a\"buffer.textColor[3] =colors.lightGray\nbuffer.textBackgroundColor[3] =colors.gray\nelse\nbuffer.text[3] =\" \"buffer.textColor[3] =colors.white\nbuffer.textBackgroundColor[3] =colors.black\nend\nend\nbutton_item.onClick=func1\nbutton_info.onClick=func2\nend\nlocal function updateSView(manager,sView)sView:clear()local x,y,w,h=1,2,_w-1,1\nfor i,file in ipairs(files)do\nlocal function start(self,event)manager:callFunction(function()local success,select=callfile(\"os/sys/execute.lua\",\n{file=file.path,select=event.name~=\"mouse_up\",edit=file.data.enter,args= {load(file.data.argument or \"\")()}\n}\n)manager:draw()end)end\ncreateEntry(sView,file,start,nil,x,y,w,h)y=y+1\nend\nlocal elements=sView:getContainer().element\nfor i=1, #elements,3 do\nsView.selectionGroup:addElement(elements[i],nil,elements[i-3],elements[i+1],elements[i+3])sView.selectionGroup:addElement(elements[i+1],elements[i],elements[i-2],nil,elements[i+4])end\nsView.selectionGroup.current=elements[1]local group_menu=manager.selectionManager.groups[1]if#elements>0 then\nfor i=1, #group_menu.elements do\ngroup_menu.elements[i].select.down=sView.selectionGroup\nend\nelements[1].select.up=group_menu\nelements[2].select.up=group_menu\ngroup_menu.next=sView.selectionGroup\ngroup_menu.previous=sView.selectionGroup\nelse\nfor i=1, #group_menu.elements do\ngroup_menu.elements[i].select.down=nil\nend\ngroup_menu.next=nil\ngroup_menu.previous=nil\nend\nsView:resizeContainer()sView:recalculate()end\nlocal manager=ui.uiManager.new(_x,_y,_w,_h)for i=1,_w*_h do\nif i<=_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.green\nmanager.buffer.textBackgroundColor[i] =colors.green\nelse\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.white\nmanager.buffer.textBackgroundColor[i] =colors.white\nend\nend\nlocal button_browser=ui.button.new(manager,\"Browser\",theme.button1,1,1,9,1)local button_explorer=ui.button.new(manager,\"Explorer\",theme.button1,10,1,10,1)local button_options=ui.button.new(manager,\"\\164\",theme.button1,_w-5,1,3,1)local button_exit=ui.button.new(manager,\"x\",theme.button2,_w-2,1,3,1)local sView_list=ui.scrollView.new(manager,\"\",3,theme.sView1,1,2,_w,_h-1)function button_browser:onClick(event)manager:callFunction(function()local success,select=callfile(\"os/sys/execute.lua\", {file=\"os/sys/browser/main.lua\",select=event~=\"mouse_up\",args= {{select=event~=\"mouse_up\"}}})loadFiles()updateSView(manager,sView_list)manager:draw()end)end\nfunction button_explorer:onClick(event)manager:callFunction(function()local success,select=callfile(\"os/sys/execute.lua\",\n{file=\"os/sys/explorer/main.lua\",select=event~=\"mouse_up\",args= {{select=event~=\"mouse_up\"}}\n}\n)manager:draw()end)end\nfunction button_options:onClick(event)end\nfunction button_exit:onClick(event)manager:exit()term.setCursorPos(1,1)term.setTextColor(colors.white)term.setBackgroundColor(colors.black)term.clear()end\nlocal group_menu=manager.selectionManager:addNewGroup()local group_list=sView_list.selectionGroup\nmanager.selectionManager:addGroup(group_list)group_list.previous=group_menu\ngroup_list.next=group_menu\ngroup_menu:addElement(button_browser,nil,nil,button_explorer,nil)group_menu:addElement(button_explorer,button_browser,nil,button_options,nil)group_menu:addElement(button_options,button_explorer,nil,button_exit,nil)group_menu:addElement(button_exit,button_options,nil,nil,nil)group_menu.current=button_browser\nfiles= {}loadFiles()updateSView(manager,sView_list)local mode=3\nif term.isColor()then\nmode=1\nend\nif#sView_list:getContainer().element>0 then\nmanager.selectionManager:select(group_list,\"code\",mode)else\nmanager.selectionManager:select(group_menu,\"code\",mode)end\nmanager:draw()manager:execute()\n",["os/api/ui/rect.lua"] = "_rect_metatable= {__newindex=function(self,key,value)error(\"Please use the given functions to edit Values\",2)end,__tostring=function(self)return \"(\" ..self.x..\", \" ..self.y..\", \" ..self.w..\", \" ..self.h..\")\"end,__eq=function(self,rect)return(self.x==rect.x and self.y==rect.y and self.w==rect.w and self.h==rect.h)end,__metatable=false}ui.rect= {}function ui.rect.new(x,y,w,h)local this= {x=x or 0,y=y or 0,w=w or 0,h=h or 0}function this:getUnpacked()return self.x,self.y,self.w,self.h\nend\nfunction this:set(x,y,w,h)self.x=x or self.x\nself.y=y or self.y\nself.w=w or self.w\nself.h=h or self.h\nend\nfunction this:getOverlaps(x,y,w,h)return ui.rect.overlaps(x,y,w,h,self:getUnpacked())end\nfunction this:contains(x,y)return(x>=self.x and x<self.x+self.w and y>=self.y and y<self.y+self.h)end\nsetmetatable(this,_rect_metatable)return this\nend\nfunction ui.rect.overlaps(x1,y1,w1,h1,x2,y2,w2,h2)local newX=math.max(x1,x2)local newY=math.max(y1,y2)local newW=math.min(x1+w1-newX,x2+w2-newX)local newH=math.min(y1+h1-newY,y2+h2-newY)local possible=true\nif newW<=0 or newH<=0 then\npossible=false\nend\nreturn newX,newY,newW,newH,possible\nend\n",["os/api/core/vector.lua"] = "vector= {}local _v= {}function _v:copy()return vector.new(self:unpack())end\nfunction _v:set(x,y,z)if x then\nself.x=x\nend\nif y then\nself.y=y\nend\nif z then\nself.z=z\nend\nend\nfunction _v:unpack()return self.x,self.y,self.z\nend\nfunction _v:dot(o)return self.x*o.x+self.y*o.y+self.z*o.z\nend\nfunction _v:cross(o)return vector.new(self.y*o.z-self.z*o.y,self.z*o.x-self.x*o.z,self.x*o.y-self.y*o.x)end\nfunction _v:sqLength()return self.x*self.x+self.y*self.y+self.z*self.z\nend\nfunction _v:length()return math.sqrt(self:sqLength())end\nfunction _v:normalize()return self:mul(1/self:length())end\nfunction _v:round(tolerance)tolerance=tolerance or 1.0\nreturn vector.new(math.floor((self.x+ (tolerance*0.5)) /tolerance) *tolerance,math.floor((self.y+ (tolerance*0.5)) /tolerance) *tolerance,math.floor((self.z+ (tolerance*0.5)) /tolerance) *tolerance)end\nlocal _v_m= {}function _v_m.__add(v1,v2)return vector.new(v1.x+v2.x,v1.y+v2.y,v1.z+v2.z)end\nfunction _v_m.__sub(v1,v2)if type(v2) ~=\"table\"then\nerror(\"lol\",4)end\nreturn vector.new(v1.x-v2.x,v1.y-v2.y,v1.z-v2.z)end\nfunction _v_m.__mul(v1,v2)return vector.new(v1.x*v2,v1.y*v2,v1.z*v2)end\nfunction _v_m.__div(v,m)return vector.new(v.x/m,v.y/m,v.z/m)end\nfunction _v_m.__unm(v)return vector.new(-v.x, -v.y, -v.z)end\nfunction _v_m.__tostring(v)return v.x..\",\" ..v.y..\",\" ..v.z\nend\nfunction _v_m.__eq(v1,v2)return(v1.x==v2.x and v1.y==v2.y and v1.z==v2.z)end\nfunction _v_m.__lt(v1,v2)return(v2:sqLength() <v1:sqLength())end\nfunction _v_m.__le(v1,v2)return(v1:sqLength() <=v2:sqLength())end\n_v_m.__index=_v\nfunction vector.new(x,y,z)local v= {x=tonumber(x)or x,y=tonumber(y)or y,z=tonumber(z)or z}setmetatable(v,_v_m)return v\nend\nfunction vector.copy(v)return v:copy()end\nvector.one=vector.new(1,1,1)vector.zero=vector.new(0,0,0)vector.forward=vector.new(1,0,0)vector.backward=vector.new(-1,0,0)vector.left=vector.new(0, -1,0)vector.right=vector.new(0,1,0)vector.up=vector.new(0,0,1)vector.down=vector.new(0,0, -1)function vector.contains(v1,v2,v3)local vMin=vector.new(math.min(v1.x,v2.x),math.min(v1.y,v2.y),math.min(v1.z,v2.z))local vMax=vector.new(math.max(v1.x,v2.x),math.max(v1.y,v2.y),math.max(v1.z,v2.z))if v3.x>=vMin.x and v3.x<=vMax.x and v3.y>=vMin.y and v3.y<=vMax.y and v3.z>=vMin.z and v3.z<=vMax.z then\nreturn true\nelse\nreturn false\nend\nend\nfunction vector.convert(list)setmetatable(list,_v_m)end\n",["os/api/core/utility.lua"] = "function IF(condition,v1,v2)if condition then\nreturn v1\nend\nreturn v2\nend\nfunction callfile(path, ...)return assert(loadfile(path))(...)end\n",["os/api/ui/inputField.lua"] = "ui.inputField= {}function ui.inputField.new(parent,label,text,multiLine,style,x,y,w,h,key)local this=ui.element.new(parent,\"inputField\",x,y,w,h,key)this.style=style\nthis.text=nil\nthis.label=label\nthis.multiLine=multiLine\nthis.repeatItem=ui.repeatItem.new(0.8,0,0)this._cursorX=1\nthis._cursorY=1\nthis.autoComplete= {}this.autoCompleteIndex=1\nthis.onSuggestCompletion=nil\nthis.onAutoCompletion=nil\nthis.onTextEdit=nil\nthis.ignoreKeys= {\"tab\",\"leftCtrl\",\"grave\",\"leftShift\",\"rightShift\",\"leftAlt\",\"capsLock\",\"f1\",\"f2\",\"f3\",\"f4\",\"f5\",\"f6\",\"f7\",\"f8\",\"f9\",\"f10\",\"numLock\",\"scollLock\",\"f11\",\"f12\",\"f13\",\"f14\",\"f15\",\"kana\",\"convert\",\"noconvert\",\"yen\",\"colon\",\"kanji\",\"stop\",\"ax\",\"rightCtrl\",\"rightAlt\",\"pause\",\"up\",\"pageUp\",\"down\",\"pageDown\",\"insert\",\"delete\"\n}this.cursorOffset=0\nfunction this:getOffset()if self.multiLine and self.cursorOffset>0 then\nlocal i,length,total=0,0,self.text:len()for line in self.text:gmatch(\"[^\\n\\r]*.\")do\nlocal len=line:len()if length+len>self.cursorOffset or(length+len==total and self.text:sub(total) ~=\"\\n\")then\nbreak\nend\nlength=length+len\ni=i+1\nend\nreturn self.cursorOffset-length,i\nelse\nreturn self.cursorOffset,0\nend\nend\nfunction this:moveCursorVertical(amount)local i,length,total,lengths,lens=1,0,self.text:len(), {0}, {0}for line in self.text:gmatch(\"[^\\n\\r]*.\")do\nlocal len=line:len()length=length+len\ntable.insert(lengths,length)if length==total and self.text:sub(total) ~=\"\\n\"then\ntable.insert(lens,len+1)break\nend\ntable.insert(lens,len)if not(length>self.cursorOffset)then\ni=i+1\nend\nend\nlocal newLength=lengths[math.max(1,math.min(#lengths,i+amount))]newLength=newLength+math.min(self.cursorOffset-lengths[i],lens[math.max(1,math.min(#lengths,i+amount+1))] -1)if newLength>=0 and newLength<=total and i+amount< #lengths then\nself.cursorOffset=newLength\nreturn true\nend\nreturn false\nend\nthis.getCursorPos=function()if this.mode==3 then\nreturn true,this:getGlobalPosX() +this._cursorX,this:getGlobalPosY() +this._cursorY,colors.red\nend\nend\nfunction this:setText(text,index)self.text=text\nif self.onTextEdit then\nlocal text=self:onTextEdit(\"text\",text)if text then\nself.text=text\nend\nend\nif index== -1 then\nindex=self.cursorOffset\nend\nif index then\nself.cursorOffset=math.max(0,math.min(text:len(),index))else\nself.cursorOffset=text:len()end\nif self.mode>2 then\nself:getAutoComplete()end\nend\nfunction this:combinedText(text)return self.text:sub(1,self.cursorOffset) ..text..self.text:sub(self.cursorOffset+1)end\nfunction this:getAutoComplete()if self.onSuggestCompletion then\nself:onSuggestCompletion(self.text,self.cursorOffset)end\nself.autoCompleteIndex=1\nend\nfunction this:recalculateText()local theme\nif self.mode==1 or self.mode==4 then\ntheme=self.style.nTheme\nelseif self.mode==2 then\ntheme=self.style.dTheme\nelse\ntheme=self.style.sTheme\nend\nlocal left= #theme.b[4]local top= #theme.b[2]local right= #theme.b[6]local bottom= #theme.b[8]local width=self:getWidth()local height=self:getHeight()if self.mode<=2 then\nlocal text\nif self.multiLine then\ntext=self.text\nelse\nlocal length=self.text:len()if length>width then\nlocal align=self.style.align\nif align==1 or align==4 or align==7 then\ntext=self.text:sub(1,width-left-right-3) ..\"...\"elseif align==2 or align==1 or align==8 then\nlocal w=width-left-right-3\ntext=self.text:sub(1,math.floor(w/2)) ..\"...\" ..self.text:sub(length-math.ceil(w/2))else\ntext=\"...\" ..self.text:sub(length-width+left+right+3)end\nelse\ntext=self.text\nend\nend\nui.buffer.labelBox(self.buffer,text,theme.tC,theme.tBG,1,theme.b[5][1],left,top,right,bottom)else\nself:getManager().getCursorPos=self.getCursorPos\nlocal completeText\nif#self.autoComplete>0 then\ncompleteText=self.autoComplete[self.autoCompleteIndex]else\ncompleteText=\"\"end\nlocal lines= {}local text=self:combinedText(completeText)if self.multiLine then\nfor line in text:gmatch(\"[^\\n\\r]*.\")do\nif line then\ntable.insert(lines,line)else\ntable.insert(lines,\"\")end\nend\nelse\nlines[1] =self.text:gsub(\"[\\n\\r]\",\" \")end\nif#lines==0 then\nlines[1] =\"\"end\nlocal offsetX,offsetY=self:getOffset()local length=lines[math.max(1,math.min(#lines,offsetY+1))]:len()local cropStart=math.max(1,offsetY+1-height+top+bottom+1)table.crop(lines,cropStart,cropStart+height-top-bottom)local completeLength=completeText:len()local offsetT=length- (width-left-right) +1\noffsetT=math.min(offsetT,offsetX-width+left+right+1)local offsetC=math.max(0,math.min(width-left-right-3,completeLength,length+completeLength-width-left-right+3))offsetT=offsetT+offsetC\noffsetT=math.max(0,offsetT)self._cursorX=self.buffer.rect.x+left+offsetX-offsetT-self:getGlobalPosX()self._cursorY=self.buffer.rect.y+top-self:getGlobalPosY() +offsetY-cropStart+1\nfor i=1, #lines do\nlines[i] =lines[i]:sub(offsetT+1)if lines[i] ==\"\"then\nlines[i] =\"\\n\"end\nend\ntext=table.concat(lines,\"\")ui.buffer.labelBox(self.buffer,text,theme.tC,theme.tBG,1,theme.b[5][1],left,top,right,bottom)local newLeft=left+self.cursorOffset-offsetT\nif completeText~=\"\"then\nui.buffer.labelBox(self.buffer,completeText,theme.complC,theme.complBG,1,theme.b[5][1],newLeft,top,math.max(right,width-newLeft-completeLength),height-top-1)end\nend\nend\nfunction this:recalculate()local theme\nlocal labelTheme\nif self.mode==1 or self.mode==4 then\ntheme=self.style.nTheme\nlabelTheme=self.style.label.nTheme\nelseif self.mode==2 then\ntheme=self.style.dTheme\nlabelTheme=self.style.label.dTheme\nelse\ntheme=self.style.sTheme\nlabelTheme=self.style.label.sTheme\nend\nui.buffer.borderBox(self.buffer,theme.b,theme.bC,theme.bBG)if self.label then\nlocal label=labelTheme.prefix..self.label..labelTheme.suffix\nlocal yPos=math.max(0,math.floor((#theme.b[2] -1) /2))ui.buffer.labelBox(self.buffer,label,labelTheme.tC,labelTheme.tBG,self.style.label.align,nil, #theme.b[4],yPos, #theme.b[6],self.buffer.rect.h-yPos)end\nself:recalculateText()end\nfunction this:normalEvent(event)if self.mode==3 then\nif event.name==\"char\"then\nlocal char\nif self.onTextEdit then\nchar=self:onTextEdit(\"char\",event.param1)end\nif not char then\nchar=event.param1\nend\nself.text=self:combinedText(char)self.cursorOffset=self.cursorOffset+char:len()self:getAutoComplete()self:recalculateText()self:repaint(\"this\")return self\nelseif event.name==\"paste\"then\nlocal paste\nif self.onTextEdit then\npaste=self:onTextEdit(\"paste\",event.param1)end\nif not paste then\npaste=event.param1\nend\nself.text=self.text:sub(1,self.cursorOffset) ..paste..self.text:sub(self.cursorOffset+1)self.cursorOffset=self.cursorOffset+paste:len()self:getAutoComplete()self:recalculateText()self:repaint(\"this\")return self\nelseif event.name==\"key\"then\nlocal key=keys.getName(event.param1)if key==\"backspace\"then\nif self.cursorOffset>0 and self.repeatItem:call()and(not self.onTextEdit or not(self:onTextEdit(\"delete\",self.cursorOffset) ==false))then\nself.text=self.text:sub(1,self.cursorOffset-1) ..self.text:sub(self.cursorOffset+1)self.cursorOffset=self.cursorOffset-1\nself:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nelseif key==\"delete\"then\nif self.cursorOffset<self.text:len()and self.repeatItem:call()then\nif not self.onTextEdit or not(self:onTextEdit(\"delete\",self.cursorOffset) ==false)then\nself.text=self.text:sub(1,self.cursorOffset) ..self.text:sub(self.cursorOffset+2)self:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nend\nelseif key==\"home\"then\nif self.repeatItem:call()and self.cursorOffset>0 then\nself.cursorOffset=0\nself:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nelseif key==\"end\"then\nif self.repeatItem:call()and self.cursorOffset<self.text:len()then\nself.cursorOffset=self.text:len()self:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nelseif key==\"left\"then\nif self.repeatItem:call()and self.cursorOffset>0 then\nself.cursorOffset=self.cursorOffset-1\nself:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nelseif key==\"right\"then\nif self.repeatItem:call()then\nlocal success=false\nif#self.autoComplete>0 then\nlocal text\nsuccess,text,self.cursorOffset=self:onAutoCompletion(self.text,self.cursorOffset,self.autoComplete[self.autoCompleteIndex])if self.onTextEdit then\ntext=self:onTextEdit(\"autocomplete\",text)end\nself.text=text\nend\nif not success then\nself.cursorOffset=math.min(self.text:len(),self.cursorOffset+1)end\nself:getAutoComplete()self:recalculateText()self:repaint(\"this\")end\nelseif key==\"up\"then\nif self.multiLine then\nif self:moveCursorVertical(-1)then\nself:recalculateText()self:repaint(\"this\")return self\nend\nelse\nif#self.autoComplete>0 then\nif self.autoCompleteIndex<=1 then\nself.autoCompleteIndex= #self.autoComplete\nelse\nself.autoCompleteIndex=self.autoCompleteIndex-1\nend\nself:recalculateText()self:repaint(\"this\")return self\nend\nend\nelseif key==\"down\"then\nif self.multiLine then\nif self:moveCursorVertical(1)then\nself:recalculateText()self:repaint(\"this\")return self\nend\nelse\nif#self.autoComplete>0 then\nif self.autoCompleteIndex>= #self.autoComplete then\nself.autoCompleteIndex=1\nelse\nself.autoCompleteIndex=self.autoCompleteIndex+1\nend\nself:recalculateText()self:repaint(\"this\")return self\nend\nend\nelseif key==\"enter\"and self.multiLine then\nlocal char\nif self.onTextEdit then\nchar=self:onTextEdit(\"enter\")end\nif not char then\nchar=\"\\n\"end\nself.text=self:combinedText(char)self.cursorOffset=self.cursorOffset+char:len()self:getAutoComplete()self:recalculateText()self:repaint(\"this\")return self\nend\nfor index,value in ipairs(self.ignoreKeys)do\nif key==value then\nreturn\nend\nend\nreturn self\nelseif event.name==\"key_up\"then\nlocal key=keys.getName(event.param1)if key==\"enter\"and not self.multiLine then\nif self._onSubmit then\nself:_onSubmit(event,self.text)end\nreturn self\nend\nfor index,value in ipairs(self.ignoreKeys)do\nif key==value then\nreturn\nend\nend\nself.repeatItem:reset()return self\nend\nend\nend\nfunction this:pointerEvent(event,x,y,w,h)x,y,w,h=ui.rect.overlaps(x,y,w,h,self.buffer.rect:getUnpacked())if event.name==\"mouse_click\"then\nif event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=3\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nend\nelseif event.name==\"mouse_drag\"then\nif self.mode==4 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=3\nself:recalculate()self:repaint(\"this\",x,y,w,h)elseif self.mode==3 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=4\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nelseif event.name==\"mouse_up\"then\nif self.mode==3 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nreturn self\nelseif self.mode==4 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=1\nself:recalculate()self:repaint(\"this\",x,y,w,h)return self\nend\nend\nend\nthis:setText(text)this:recalculate()return this\nend\n",["os/api/core/table.lua"] = "function table.copy(list)if type(list) ~=\"table\"then\nerror(\"bad argument: table expected, got \" ..type(list),2)end\nlocal new= {}for key,value in pairs(list)do\nif type(value) ==\"table\"then\nnew[key] =table.copy(value)else\nnew[key] =value\nend\nend\nreturn new\nend\nfunction table.save(list,path)if type(table) ~=\"table\"then\nerror(\"bad argument: table expected, got \" ..type(table),2)end\nlocal save=table.toString(list)file=io.open(path,\"w\")file:write(\"return\" ..save)file:close()end\nfunction table.checkType(set,name,kind,needSet,default)if not(set[name]or set[name] ==false)then\nset[name] =default\nend\nlocal value=set[name]local valueType=type(value)if value or value==false then\nif valueType~=kind then\nerror((\"'%s' is set but has the wrong type. (expected '%s' got '%s')\"):format(name,kind,valueType),3)end\nelseif needSet then\nerror((\"'%s' is not set. (expected '%s' got 'nil')\"):format(name,kind),3)end\nend\nfunction table.swap(list,i,j)local temp=list[i]list[i] =list[j]list[j] =temp\nend\nfunction table.order(list,func)local values= {}local n= #list\nfor i=1,n do\nvalues[i] =func(list[i])end\nrepeat\nlocal newn=1\nfor i=2,n do\nif values[i-1] >values[i]then\ntable.swap(values,i-1,i)table.swap(list,i-1,i)newn=i\nend\nend\nn=newn\nuntil n<=1\nend\nfunction table.orderComplex(list,func)local values= {}local n= #list\nfor i=1,n do\nvalues[i] = {func(list[i])}end\nrepeat\nlocal newn=1\nfor i=2,n do\nfor j=1, #values[i-1]do\nlocal var1,var2=values[i-1][j],values[i][j]if var1>var2 then\ntable.swap(values,i-1,i)table.swap(list,i-1,i)newn=i\nbreak\nelseif var1<var2 then\nbreak\nend\nend\nend\nn=newn\nuntil n<=1\nend\nfunction table.clear(list)for k in pairs(list)do\nlist[k] =nil\nend\nend\nlocal function _tableToString(list,contains)for i=1, #contains do\nif contains[i] ==list then\nerror(\"Table is recursive and can not converted to string.\", #contains+2)end\nend\ntable.insert(contains,v)local i,items=1, {}for k,v in pairs(list)do\nif i==k then\ni=i+1\nelse\ni=nil\nend\nlocal t,value=type(v),nil\nif t==\"table\"then\nvalue=_tableToString(v,contains)elseif t==\"string\"then\nvalue='\"' .. v:gsub('\"','\\\\\"'):gsub(\"[\\n\\r]\",\"\\\\n\") ..'\"'elseif t==nil then\nvalue=t\nelse\nvalue=tostring(v)end\nif type(k) ==\"number\"then\nif i then\ntable.insert(items,value)else\ntable.insert(items, (\"[%s]=%s\"):format(k,value))end\nelse\ntable.insert(items, (\"%s=%s\"):format(k,value))end\nend\ntable.remove(contains, #contains)return(\"{%s}\"):format(table.concat(items,\",\"))end\nfunction table.toString(list)return _tableToString(list, {})end\nfunction table.crop(list,i,j)i,j=math.min(i,j),math.max(i,j)while j< #list do\ntable.remove(list)end\nfor i=2,i do\ntable.remove(list,1)end\nend\nfunction table.removeAt(list,at)if type(at) ==\"number\"then\ntable.remove(list,at)else\nlist[at] =nil\nend\nend\nfunction table.combine(...)local list= {}for _,v in ipairs({...})do\nif type(v) ==\"table\"then\nfor i=1, #v do\ntable.insert(list,v[i])end\nelseif type(v) ~=\"nil\"then\ntable.insert(list,v)end\nend\nreturn list\nend\nfunction table.reverse(list)for i=1,math.floor(#list/2)do\ntable.swap(list,i, #list-i+1)end\nend\n",["os/sys/browser/getList.lua"] = "local p1,p2,p3=\"os/sys/browser/data/official\",\"os/sys/browser/data/unofficial\",\"os/sys/browser/data/installed\"local l1= {}if... ~=false and www.pasteBinSave(dofile(\"os/sys/browser/data/settings.set\").official,p1,true)then\nl1=dofile(p1)if not fs.exists(p3)then\nlocal h=fs.open(p3,\"w\")h.write(\"return{}\")h.close()callfile(\"os/sys/browser/install.lua\",1,l1[1])end\nend\nif not fs.exists(p2)then\nlocal h=fs.open(p2,\"w\")h.write(\"return{}\")h.close()end\nreturn l1,dofile(p2),dofile(\"os/sys/browser/data/installed\")\n",["os/sys/listBox.lua"] = "local args= ...local _x,_y,_w,_h=args.manager:getGlobalRect()args.anchor=args.anchor or 1\nargs.listBoxStyle=args.listBoxStyle or theme.sView2\nargs.listButtonStyle=args.listButtonStyle or theme.button3\nargs.select=args.select or not term.isColor()local select=args.select\nlocal listBoxLeft,listBoxTop,listBoxRight,listBoxBottom= #args.listBoxStyle.nTheme.b[4], #args.listBoxStyle.nTheme.b[2], #args.listBoxStyle.nTheme.b[6], #args.listBoxStyle.nTheme.b[8]local listButtonLeft,listButtonRight= #args.listButtonStyle.nTheme.b[4], #args.listButtonStyle.nTheme.b[6]local borderW,borderH=listButtonLeft+listButtonRight+listBoxLeft+listBoxRight,listBoxTop+listBoxBottom\nlocal indexes= {}local function getHorizontal(buttons,posX,border,anchor)local x=posX\nlocal w=1\nfor i=1, #buttons do\nlocal button=buttons[i]if type(button) ==\"string\"then\nlocal add=0\nif button:sub(1,1) ==\"*\"then\nadd=add-1\nend\nw=math.max(w,button:len() +add)else\nw=math.max(w,button.name:len() +2)end\nend\nw=w+border\nif anchor==2 or anchor==5 or anchor==8 then\nx=math.min(_x,math.max(_x+_w-w,math.floor(x-w/2)))elseif anchor==3 or anchor==6 or anchor==9 then\nx=math.min(_x,math.max(_x+_w-w,x-w))end\nreturn x,w\nend\nlocal function getVertical(buttons,posY,border,anchor)local y=posY\nlocal h= #buttons+border\nif anchor==4 or anchor==5 or anchor==6 then\ny=math.min(_y,math.max(_y+_h-h,math.floor(y-h/2)))elseif anchor==7 or anchor==8 or anchor==9 then\ny=math.min(_y,math.max(_y+_h-h,y-h))end\nreturn y,h\nend\nlocal function setListBox(manager,listBox,buttons,indexes,x,y,w,h)listBox:setGlobalRect(x,y,w,h)local currentButtons=buttons\nfor i=1, #indexes do\ncurrentButtons=currentButtons[indexes[i]]end\nlistBox:clear()local container=listBox:getContainer()local elements= {}if#indexes>0 then\nlocal element=ui.button.new(container,\" <<<\",args.listButtonStyle,args.x+listBoxLeft,args.y+listBoxTop,args.w-listBoxLeft-listBoxRight,1)function element:onClick(event)local select=true\nif event.name==\"mouse_up\"then\nselect=false\nend\nmanager:callFunction(function()manager.parallelManager:removeFunction(element.animation)table.remove(indexes, #indexes)local button=buttons\nfor i=1, #indexes do\nbutton=button[indexes[i]]end\nlocal x,y,w,h=listBox:getGlobalRect()x,w=getHorizontal(button,x,borderW,args.anchor)y,h=getVertical(button,y,borderH+math.min(#indexes,1),args.anchor)setListBox(manager,listBox,buttons,indexes,x,y,w,h)if select then\nmanager.selectionManager:select(listBox.selectionGroup.current,\"code\",3)end\nmanager:recalculate()manager:draw()end)end\ntable.insert(elements,element)end\nfor i=1, #currentButtons do\nlocal button=currentButtons[i]local x,y,w,h=args.x+listBoxLeft,args.y+i-1+listBoxTop+math.min(#indexes,1),args.w-listBoxLeft-listBoxRight,1\nif type(button) ==\"table\"then\nlocal element=ui.button.new(container,button.name..\" >\",args.listButtonStyle,x,y,w,h)function element:onClick(event)local select=true\nif event.name==\"mouse_up\"then\nselect=false\nend\nmanager:callFunction(function()manager.parallelManager:removeFunction(element.animation)table.insert(indexes,i)local x,y,w,h=listBox:getGlobalRect()x,w=getHorizontal(button,x,borderW,args.anchor)y,h=getVertical(button,y,borderH+1,args.anchor)setListBox(manager,listBox,buttons,indexes,x,y,w,h)if select then\nmanager.selectionManager:select(listBox.selectionGroup.current)end\nmanager:recalculate()manager:draw()end)end\ntable.insert(elements,element)else\nif button==\"-\"then\nlocal element=ui.element.new(container,\"image\",x,y,w,h)for i=1,w do\nelement.buffer.text[i] =\"-\"element.buffer.textColor[i] =args.listButtonStyle.nTheme.tC\nelement.buffer.textBackgroundColor[i] =args.listButtonStyle.nTheme.tBG\nend\nelement.buffer.text[1] =\" \"element.buffer.text[w] =\" \"elseif button~=\"\"then\nlocal element=ui.button.new(container,button,args.listButtonStyle,x,y,w,h)function element:onClick(event)table.insert(indexes,i)select= (event.name~=\"mouse_up\")manager:exit()end\ntable.insert(elements,element)if button:sub(1,1) ==\"*\"then\nelement.text=button:sub(2)element.mode=2\nelement:recalculate()end\nend\nend\nend\nfor i,value in ipairs(elements)do\nlistBox.selectionGroup:addElement(elements[i],nil,elements[i-1],nil,elements[i+1])end\nlistBox:resetLayout()listBox:recalculate()listBox.selectionGroup.current=elements[1]end\nif not args.w then\nargs.x,args.w=getHorizontal(args.buttons,args.x,borderW,args.anchor)end\nif not args.h then\nargs.y,args.h=getVertical(args.buttons,args.y,borderH,args.anchor)end\nlocal manager=ui.uiManager.new(_x,_y,_w,_h)manager.recalculate=function()manager.buffer:contract(args.manager.buffer)end\nmanager:recalculate()local listBox=ui.scrollView.new(manager,args.label,3,args.listBoxStyle,args.x,args.y,args.w,args.h)setListBox(manager,listBox,args.buttons,indexes,args.x,args.y,args.w,args.h)function listBox.selectionGroup:listener(name,source, ...)if name==\"key_up\"then\nlocal key=keys.getName(...)if key==\"tab\"or key==\"e\"or key==\"q\"then\nselect=true\nmanager:exit()end\nelseif name==\"mouse\"then\nlocal event= ...if event.name==\"mouse_click\"then\nlocal x,y,w,h=listBox:getGlobalRect()if event.param2<x or event.param2>x+w or event.param3<y or event.param3>y+h then\nselect=false\nmanager:exit()end\nend\nend\nend\nmanager.selectionManager:addGroup(listBox.selectionGroup)local mode=3\nif select==false then\nmode=1\nend\nmanager.selectionManager:select(listBox.selectionGroup,\"code\",mode)manager:draw()manager:execute()local name=args.buttons[indexes[1]]for i=2, #indexes do\nname=name[indexes[i]]end\nreturn name,indexes,select\n",["os/api/ui/button.lua"] = "ui.button= {}function ui.button.new(parent,text,style,x,y,w,h,key)local this=ui.element.new(parent,\"button\",x,y,w,h,key)this.style=style\nthis.text=text\nthis._inAnimation=false\nthis.animation=ui.parallelElement.new(function(data)local clock=data[1] -os.clock() +0.15\nif clock>0 then\nsleep(clock)end\nthis._inAnimation=false\nthis:recalculate()this:repaint(\"this\")return false\nend)function this:pointerEvent(event,x,y,w,h)x,y,w,h=ui.rect.overlaps(x,y,w,h,self.buffer.rect:getUnpacked())if event.name==\"mouse_click\"then\nif event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=4\nif self._inAnimation==false then\nself._inAnimation=true\nself:recalculate()self:repaint(\"this\",x,y,w,h)self.animation.data[1] =os.clock()self:getManager().parallelManager:addFunction(self.animation)end\nreturn self\nend\nelseif event.name==\"mouse_drag\"then\nif self.mode==3 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=4\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nelseif self.mode==4 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=3\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nend\nelseif event.name==\"mouse_up\"then\nif self.mode==4 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=1\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nif self.onClick then\nself:onClick(event)end\nreturn self\nelseif self.mode==3 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=1\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nreturn self\nend\nend\nend\nfunction this:normalEvent(event)if event.name==\"key\"and self.mode==3 and(event.param1==57 or event.param1==28 or event.param1==29)then\nself.mode=4\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",self:getCompleteMaskRect())self._inAnimation=true\nself.animation.data[1] =os.clock()self:getManager().parallelManager:addFunction(self.animation)end\nreturn self\nelseif event.name==\"key_up\"and self.mode==4 and(event.param1==57 or event.param1==28 or event.param1==29)then\nself.mode=3\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",self:getCompleteMaskRect())end\nif self.onClick then\nself:onClick(event)end\nreturn self\nend\nend\nfunction this:recalculate()local mode=self.mode\nlocal theme=nil\nif mode==1 then\ntheme=self.style.nTheme\nelseif mode==2 then\ntheme=self.style.dTheme\nelseif mode==3 then\ntheme=self.style.sTheme\nelse\ntheme=self.style.pTheme\nend\nui.buffer.borderLabelBox(self.buffer,self.text,theme.tC,theme.tBG,theme.b,theme.bC,theme.bBG,self.style.align)end\nthis:recalculate()return this\nend\n",["os/api/core/fs.lua"] = "function fs.doFile(path)if fs.exists(path)then\nreturn true,dofile(path)else\nreturn false\nend\nend\nfunction fs.listAll(path,paths)local paths=paths or{}local list=fs.list(path)for _,p in ipairs(list)do\nif path~=\"\"then\np=path..\"/\" ..p\nend\nif fs.isDir(p)then\nfs.listAll(p,paths)else\ntable.insert(paths,p)end\nend\nreturn paths\nend\nfunction fs.addExtension(path,ext)if not path:sub(path:len() -ext:len()) ==ext then\nreturn path..\".\" ..ext\nelse\nreturn path\nend\nend\nfunction fs.getExtension(path)local ext=path:match(\"[^/]%.[^/]-$\")if ext then\nreturn ext:sub(3)else\nreturn nil\nend\nend\nfunction fs.getClearName(path)return fs.getName(path):match(\".[^%.]+\")end\n",["os/api/ui/label.lua"] = "ui.label= {}function ui.label.new(parent,text,style,x,y,w,h,key)local this=ui.element.new(parent,\"label\",x,y,w,h,key)this.style=style\nthis.text=text\nfunction this:recalculate()local theme=nil\nif self.mode==2 then\ntheme=self.style.dTheme\nelse\ntheme=self.style.nTheme\nend\nui.buffer.labelBox(self.buffer,self.text,theme.tC,theme.tBG,self.style.align,\" \",0,0,0,0)end\nthis:recalculate()return this\nend\n",["os/api/ui/buffer.lua"] = "ui.buffer= {}function ui.buffer.new(x,y,w,h,t,tC,tBG)local this= {text=t or{},textColor=tC or{},textBackgroundColor=tBG or{}}this.rect=ui.rect.new(x,y,w,h)function this:draw(x,y,w,h)local thisX,thisY,thisW,thisH=self.rect:getUnpacked()local maskX,maskY,maskW,maskH=thisX,thisY,thisW,thisH\nlocal possible=true\nif x then\nmaskX,maskY,maskW,maskH,possible=self.rect:getOverlaps(x,y,w,h)end\nif possible then\nlocal index=maskX-thisX+ (maskY-thisY) *thisW\nfor j=1,maskH do\nfor i=1,maskW do\nlocal index=maskX-thisX+i+ (maskY-thisY+j-1) *thisW\nif term.isColor()then\nterm.setTextColor(self.textColor[index])term.setBackgroundColor(self.textBackgroundColor[index])end\nterm.setCursorPos(maskX+i-1,maskY+j-1)term.write(self.text[index])end\nend\nend\nend\nfunction this:contract(buffer,x,y,w,h)local thisX,thisY,thisW,thisH=self.rect:getUnpacked()local bufferX,bufferY,bufferW,bufferH=buffer.rect:getUnpacked()local maskX,maskY,maskW,maskH=thisX,thisY,thisW,thisH\nlocal possible=true\nif x~=nil then\nmaskX,maskY,maskW,maskH,possible=self.rect:getOverlaps(x,y,w,h)end\nif possible==false then\nreturn\nend\nmaskX,maskY,maskW,maskH,possible=buffer.rect:getOverlaps(maskX,maskY,maskW,maskH)if possible==false then\nreturn\nend\nfor i=1,maskH do\nfor j=1,maskW do\nlocal bufferIndex=maskX-bufferX+j+ (maskY-bufferY+i-1) *bufferW\nlocal thisIndex=maskX-thisX+j+ (maskY-thisY+i-1) *thisW\nif buffer.text[bufferIndex]then\nself.text[thisIndex] =buffer.text[bufferIndex]end\nif buffer.textColor[bufferIndex]then\nself.textColor[thisIndex] =buffer.textColor[bufferIndex]end\nif buffer.textBackgroundColor[bufferIndex]then\nself.textBackgroundColor[thisIndex] =buffer.textBackgroundColor[bufferIndex]end\nend\nend\nend\nreturn this\nend\nfunction ui.buffer.labelBox(buffer,t,tC,tBG,align,space,left,top,right,bottom)left,top,right,bottom=left or 0,top or 0,right or 0,bottom or 0\nlocal totalWidth,totalHeight=buffer.rect.w,buffer.rect.h\nlocal width,height=totalWidth-left-right,totalHeight-top-bottom\nlocal textLines= {}for line in t:gmatch(\"[^\\r\\n]*.\")do\ntable.insert(textLines,line)end\nlocal topPadding=0\nif align==4 or align==5 or align==6 then\ntopPadding=math.max(0,math.floor((height- #textLines) /2))elseif align==7 or align==8 or align==9 then\ntopPadding=math.max(0,height- #textLines)end\nlocal h=0\nlocal index=top*totalWidth+left+1\nfor i=1,topPadding do\nfor j=1,width do\nif space then\nbuffer.text[index] =space\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nindex=index+1\nend\nh=h+1\nindex=index+left+right\nend\nfor i=1, #textLines do\nlocal line=textLines[i]local paddingLeft=0\nlocal paddingRight=0\nif align==1 or align==4 or align==7 then\npaddingRight=width-line:len()elseif align==2 or align==5 or align==8 then\nlocal repeatLengthHalf= (width-line:len()) /2\npaddingLeft=math.floor(repeatLengthHalf)paddingRight=math.ceil(repeatLengthHalf)else\npaddingLeft=width-line:len()end\nfor j=1,paddingLeft do\nif space then\nbuffer.text[index] =space\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nindex=index+1\nend\nlocal w=0\nfor char in line:gmatch(\".\")do\nif char==\" \"then\nif space then\nbuffer.text[index] =space\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nelse\nbuffer.text[index] =char\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nindex=index+1\nw=w+1\nif w==width then\nbreak\nend\nend\nfor j=1,paddingRight do\nif space then\nbuffer.text[index] =space\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nindex=index+1\nend\nindex=index+left+right\nh=h+1\nif h==height then\nbreak\nend\nend\nfor i=h+1,height do\nfor j=1,width do\nif space then\nbuffer.text[index] =space\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nindex=index+1\nend\nindex=index+left+right\nend\nend\nfunction ui.buffer.borderBox(buffer,b,bC,bBG,left,top,right,bottom)local totalWidth,totalHeight=buffer.rect.w,buffer.rect.h\nleft,top,right,bottom=left or 0,top or 0,right or 0,bottom or 0\nlocal width,height=totalWidth-left-right,totalHeight-top-bottom\nlocal leftPadding= #b[4]local rightPadding= #b[6]local topPadding= #b[2]local bottomPadding= #b[8]local index=left+ (top) *totalWidth+1\nfor i=1,height do\nif i<=topPadding then\nfor j=1,leftPadding do\nbuffer.text[index] =b[1][(i-1) *leftPadding+j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nfor j=1,width-leftPadding-rightPadding do\nbuffer.text[index] =b[2][i]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nfor j=1,rightPadding do\nbuffer.text[index] =b[3][(i-1) *rightPadding+j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nindex=index+right+left\nelseif i>height-bottomPadding then\nfor j=1,leftPadding do\nbuffer.text[index] =b[7][(i-height+bottomPadding-1) *leftPadding+j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nfor j=1,width-leftPadding-rightPadding do\nbuffer.text[index] =b[8][i-height+bottomPadding]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nfor j=1,rightPadding do\nbuffer.text[index] =b[9][(i-height+bottomPadding-1) *rightPadding+j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nindex=index+right+left\nelse\nfor j=1,leftPadding do\nbuffer.text[index] =b[4][j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nindex=index+width-leftPadding-rightPadding\nfor j=1,rightPadding do\nbuffer.text[index] =b[6][j]buffer.textColor[index] =bC\nbuffer.textBackgroundColor[index] =bBG\nindex=index+1\nend\nindex=index+right+left\nend\nend\nend\nfunction ui.buffer.borderLabelBox(buffer,t,tC,tBG,b,bC,bBG,align,left,top,right,bottom)local totalWidth,totalHeight=buffer.rect.w,buffer.rect.h\nleft,top,right,bottom=left or 0,top or 0,right or 0,bottom or 0\nlocal width,height=totalWidth-left-right,totalHeight-top-bottom\nlocal leftP= #b[4]local rightP= #b[6]local topP= #b[2]local bottomP= #b[8]ui.buffer.labelBox(buffer,t,tC,tBG,align,\" \",left+leftP,top+topP,right+rightP,bottom+bottomP)ui.buffer.borderBox(buffer,b,bC,bBG,left,top,right,bottom)end\nfunction ui.buffer.fill(buffer,t,tC,tBG,left,top,right,bottom)left,top,right,bottom=left or 0,top or 0,right or 0,bottom or 0\nfor j=1+top,buffer.rect.h-top-bottom do\nfor i=1+right,buffer.rect.w-left-right do\nlocal index=i+ (j-1) *buffer.rect.w\nbuffer.text[index] =t\nbuffer.textColor[index] =tC\nbuffer.textBackgroundColor[index] =tBG\nend\nend\nend\nfunction ui.buffer.text(buffer,t,tC,tBG,align,scaleW,scaleH,richText,left,top,right,bottom)left,top,right,bottom=left or 0,top or 0,right or 0,bottom or 0\nlocal totalWidth,totalHeight=buffer.rect.w,buffer.rect.h\nlocal width,height=totalWidth-left-right,totalHeight-top-bottom\nlocal words= {}t=t:gsub(\"\\t\",\"\")for line in t:gmatch(\"[^\\r\\n]*\")do\nif line:len() >0 then\nfor word in line:gmatch(\"[^ ]*\")do\nif word:len() >0 then\ntable.insert(words,word)else\ntable.insert(words,\" \")end\nend\nelse\ntable.insert(words,\"\\n\")end\nend\nlocal lineWidth=nil\nlocal lineCount=0\nlocal i=1\nlocal events= {}local char=0\nwhile i<= #words do\nif words[i] ==\"\\n\"then\nlineCount=0\nelse\nwhile richText do\nlocal s,e=words[i]:find(\"%[[tb][cg].-%]\")if s then\nlocal char=char+s\nlocal kind=words[i]:sub(s+1,s+2)local color=words[i]:sub(s+4,e-1)events[char] =events[char]or{}if color==\"clear\"then\nif kind==\"tc\"then\nevents[char].tc=tC\nelseif kind==\"bg\"then\nevents[char].bg=tBG\nend\nelse\ncolor=tonumber(color)or colors[color]if kind==\"tc\"then\nevents[char].tc=color\nelseif kind==\"bg\"then\nevents[char].bg=color\nend\nend\nwords[i] =words[i]:sub(1,s-1) ..words[i]:sub(e+1)else\nbreak\nend\nend\nlocal wordLen=words[i]:len()char=char+wordLen\nif lineCount==0 and wordLen>width then\ntable.insert(words,i+1,words[i]:sub(width+1))words[i] =words[i]:sub(1,width)table.insert(words,i+1,\"\\n\")else\nif lineCount==0 then\nlineCount=wordLen\nelse\nlineCount=lineCount+wordLen\nif lineCount>width then\nchar=char-math.max(0, (wordLen-width))lineCount=0\ntable.insert(words,i,\"\\n\")char=char-wordLen\nend\nend\nend\nchar=char+1\nend\ni=i+1\nend\nwhile words[#words] ==\"\\n\"do\ntable.remove(words, #words)end\nlocal lines=1\nfor i=1, #words do\nif words[i] ==\"\\n\"then\nlines=lines+1\nend\nend\nif scaleH then\nif scaleW then\nbuffer.rect:set(nil,nil,lineWidth+left+right,lines+top+bottom)else\nbuffer.rect:set(nil,nil,nil,lines+top+bottom)end\nelse\nif scaleW then\nbuffer.rect:set(nil,nil,lineWidth+left+right,nil)end\nend\ntotalWidth,totalHeight=buffer.rect.w,buffer.rect.h\nwidth,height=totalWidth-left-right,totalHeight-top-bottom\nlocal topPadding=0\nlocal bottomPadding=0\nif align==1 or align==2 or align==3 then\nbottomPadding=math.min(height,topPadding+lines)elseif align==4 or align==5 or align==6 then\ntopPadding=math.max(0,math.floor((height-lines) /2))bottomPadding=math.min(height,topPadding+lines)else\ntopPadding=math.max(0,height-lines)bottomPadding=height\nend\nlocal wordIndex=1\nlocal index=top*totalWidth+left+1\nlocal char=1\nlocal tc,bg=tC,tBG\nfor i=1,height do\nif i<=topPadding or i>bottomPadding then\nfor j=1,width do\nbuffer.text[index] =\" \"buffer.textColor[index] =tc\nbuffer.textBackgroundColor[index] =bg\nindex=index+1\nend\nelse\nlocal lineCount=0\nwhile wordIndex<= #words do\nlocal word=words[wordIndex]wordIndex=wordIndex+1\nif word==\"\\n\"then\nbreak\nelse\nfor j=1,word:len()do\nif events[char]then\ntc=events[char].tc or tc\nbg=events[char].bg or bg\nend\nchar=char+1\nbuffer.text[index] =word:sub(j,j)buffer.textColor[index] =tc\nbuffer.textBackgroundColor[index] =bg\nindex=index+1\nlineCount=lineCount+1\nend\nif events[char]then\ntc=events[char].tc or tc\nbg=events[char].bg or bg\nend\nchar=char+1\nend\nend\nif align==1 or align==4 or align==7 then\nfor j=1,width-lineCount do\nbuffer.text[index+j-1] =\" \"buffer.textColor[index+j-1] =tc\nbuffer.textBackgroundColor[index+j-1] =bg\nend\nelseif align==2 or align==5 or align==8 then\nfor j=1,math.ceil((width-lineCount) /2)do\nbuffer.text[index+j-1] =\" \"buffer.textColor[index+j-1] =tc\nbuffer.textBackgroundColor[index+j-1] =bg\nend\nfor j=1,math.floor((width-lineCount) /2)do\ntable.insert(buffer.text,index-lineCount+j-1,\" \")table.insert(buffer.textColor,index-lineCount+j-1,tc)table.insert(buffer.textBackgroundColor,index-lineCount+j-1,bg)if buffer.text[index-lineCount+width+j]then\ntable.remove(buffer.text,index-lineCount+width+j)table.remove(buffer.textColor,index-lineCount+width+j)table.remove(buffer.textBackgroundColor,index-lineCount+width+j)end\nend\nelse\nfor j=1,width-lineCount do\ntable.insert(buffer.text,index-lineCount+j-1,\" \")table.insert(buffer.textColor,index-lineCount+j-1,tc)table.insert(buffer.textBackgroundColor,index-lineCount+j-1,bg)if buffer.text[index-lineCount+width+j]then\ntable.remove(buffer.text,index-lineCount+width+j)table.remove(buffer.textColor,index-lineCount+width+j)table.remove(buffer.textBackgroundColor,index-lineCount+width+j)end\nend\nend\nindex=index+width-lineCount\nend\nindex=index+left+right\nend\nend\n",["os/api/ui/toggleButton.lua"] = "ui.toggleButton= {}function ui.toggleButton.new(parent,text,checked,style,x,y,w,h,key)local this=ui.element.new(parent,\"toggle\",x,y,w,h,key)this.style=style\nthis.text=text\nthis._checked=checked\nthis._inAnimation=false\nthis.animation=ui.parallelElement.new(function(data)local clock=data[1] -os.clock() +0.15\nif clock>0 then\nsleep(clock)end\nthis._inAnimation=false\nthis:recalculate()local x,y,w,h,possible=this:getCompleteMaskRect()if possible then\nthis:repaint(\"this\",x,y,w,h)end\nreturn false\nend)this.onToggle=nil\nfunction this:pointerEvent(event,x,y,w,h)x,y,w,h=ui.rect.overlaps(x,y,w,h,self.buffer.rect:getUnpacked())if event.name==\"mouse_click\"then\nif event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=4\nif self._inAnimation==false then\nself._inAnimation=true\nself:recalculate()self:repaint(\"this\",x,y,w,h)self.animation.data[1] =os.clock()self:getManager().parallelManager:addFunction(self.animation)end\nreturn self\nend\nelseif event.name==\"mouse_drag\"then\nif self.mode==3 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself.mode=4\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nelseif self.mode==4 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=3\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nend\nelseif event.name==\"mouse_up\"then\nif self.mode==4 and event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself._checked=self._checked==false\nself.mode=1\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nif self.onToggle then\nself:onToggle(event,self._checked)end\nreturn self\nelseif self.mode==3 and(event.param2<x or event.param2>=x+w or event.param3<y or event.param3>=y+h)then\nself.mode=1\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",x,y,w,h)end\nreturn self\nend\nend\nend\nfunction this:normalEvent(event)if event.name==\"key\"and self.mode==3 and(event.param1==57 or event.param1==28)then\nself.mode=4\nif self._inAnimation==false then\nself._inAnimation=true\nself:recalculate()self:repaint(\"this\",self:getCompleteMaskRect())self.animation.data[1] =os.clock()self:getManager().parallelManager:addFunction(self.animation)end\nreturn true\nelseif event.name==\"key_up\"and self.mode==4 and(event.param1==57 or event.param1==28)then\nself._checked=self._checked==false\nself.mode=3\nif self._inAnimation==false then\nself:recalculate()self:repaint(\"this\",self:getCompleteMaskRect())end\nif self.onToggle then\nself:onToggle(event,self._checked)end\nreturn true\nend\nend\nfunction this:recalculate()local mode=self.mode\nlocal theme=nil\nif mode==1 then\ntheme=self.style.nTheme\nelseif mode==2 then\ntheme=self.style.dTheme\nelseif mode==3 then\ntheme=self.style.sTheme\nelse\ntheme=self.style.pTheme\nend\nlocal checkbox,checkboxTextColor,checkboxBackGroundColor=nil,nil,nil\nif self._checked==true then\ncheckbox=theme.checkedL\ncheckboxTextColor=theme.checkedLC\ncheckboxBackGroundColor=theme.checkedLBG\nelse\ncheckbox=theme.uncheckedL\ncheckboxTextColor=theme.uncheckedLC\ncheckboxBackGroundColor=theme.uncheckedLBG\nend\nlocal buffer=self.buffer\nlocal align=self.style.align\nui.buffer.labelBox(buffer,self.text,theme.tC,theme.tBG,align,\" \", #checkbox,0,0,0)local topPadding=0\nif align==1 or align==2 or align==3 then\ntopPadding=1\nelseif align==4 or align==5 or align==6 then\ntopPadding=math.ceil(buffer.rect.h/2)else\ntopPadding=buffer.rect.h\nend\nlocal index=1\nfor j=1,buffer.rect.h do\nif j==topPadding then\nfor i=1, #checkbox do\nbuffer.text[index] =checkbox[i]buffer.textColor[index] =checkboxTextColor[i]buffer.textBackgroundColor[index] =checkboxBackGroundColor[i]index=index+1\nend\nindex=index+buffer.rect.h- #checkbox\nelse\nfor i=1, #checkbox do\nbuffer.text[index] =\" \"buffer.textColor[index] =theme.tC\nbuffer.textBackgroundColor[index] =theme.tBG\nindex=index+1\nend\nindex=index+buffer.rect.h- #checkbox\nend\nend\nend\nthis:recalculate()return this\nend\n",["os/sys/explorer/main.lua"] = "\nlocal args= ...local set=dofile(\"os/sys/explorer/default.lua\")if type(args) ==\"table\"then\nfor key,value in pairs(args)do\nset[key] =value\nend\nelse\nerror(\"An argument table is missing as argument\")end\nlocal function checkType(name,kind)local value=set[name]local valueType=type(value)if value or value==false then\nif valueType~=kind then\nerror((\"'%s' is set but has the wrong type. (expected '%s' got '%s')\"):format(name,kind,valueType),3)end\nelse\nerror((\"'%s' is not set. (expected '%s' got 'nil')\"):format(name,kind),3)end\nend\ncheckType(\"icons\",\"boolean\")checkType(\"hidden\",\"boolean\")checkType(\"extensions\",\"boolean\")checkType(\"neatNames\",\"boolean\")checkType(\"pathsSize\",\"number\")checkType(\"type\",\"string\")checkType(\"edit\",\"boolean\")if set.files~=false then\nset.files=true\nend\ncheckType(\"files\",\"boolean\")set.folders=set.folders or true\ncheckType(\"folders\",\"boolean\")set.mode=set.mode or \"\"checkType(\"mode\",\"string\")set.path=set.path or \"\"checkType(\"path\",\"string\")if not fs.exists(set.path)then\nerror(\"Invalid path. (path: '/\" ..set.path..\"' does not exist)\")elseif not fs.isDir(set.path)then\nerror(\"Path is not a folder. (path: '/\" ..set.path..\"')\")end\nif set.pathsSize<1 then\nerror((\"pathsSize' is set but the value is to low. (expected value > 0 got %s)\"):format(set.pathsSize),3)end\ncheckType(\"select\",\"boolean\")local ignorePaths=dofile(\"os/sys/explorer/excludedPaths.lua\")local ext= {}for _,v in ipairs(fs.list(\"os/sys/explorer/extensions\"))do\next[v] =dofile(\"os/sys/explorer/extensions/\" ..v)end\nlocal _x,_y,_w,_h\nif set.manager then\n_x,_y,_w,_h=set.manager:getGlobalRect()else\n_x,_y,_w,_h=1,1,term.getSize()end\nlocal isSelected\nlocal addSelection\nlocal removeSelection\nlocal updateSelectionLabel\nif set.mode==\"save\"then\nset.save=set.save or \"\"checkType(\"save\",\"string\")elseif set.mode==\"move\"then\ncheckType(\"move\",\"string\")elseif set.mode==\"select_many\"then\nset.items=set.items or{}checkType(\"items\",\"table\")isSelected=function(name)for _,s in ipairs(set.items)do\nif s==name then\nreturn true\nend\nend\nreturn false\nend\naddSelection=function(name)table.insert(set.items,name)end\nremoveSelection=function(name)for i,s in ipairs(set.items)do\nif s==name then\ntable.remove(set.items,i)return\nend\nend\nend\nupdateSelectionLabel=function(manager)local element=manager.element[8]element.text=tostring(#set.items)element:recalculate()element:repaint(\"this\")end\nend\nlocal pathsIndex,paths=0, {}local ret= {}local rename,move,copy,delete,create\nlocal hasUnderMenu=false\nlocal function getCurrentPath()return paths[pathsIndex]end\nlocal function addPath(path)path=path:gsub(\"/+$\",\"\")for _=pathsIndex+1, #paths do\ntable.remove(paths,pathsIndex+1)end\nwhile#paths>=set.pathsSize do\ntable.remove(paths,1)end\ntable.insert(paths,path)pathsIndex=math.min(pathsIndex+1,set.pathsSize)end\nlocal function updatePath()if not fs.isDir(getCurrentPath())then\npaths[pathsIndex] =set.path\nif not fs.isDir(getCurrentPath())then\npaths[pathsIndex] =\"\"end\nend\nend\nlocal function updateButton(manager)local upButton,backButton,forwardButton,inputField=table.unpack(manager.element,3,6)if pathsIndex==1 then\nif backButton.mode~=2 then\nbackButton.mode=2\nif not backButton._inAnimation then\nbackButton:recalculate()backButton:repaint(\"this\")end\nend\nelse\nif backButton.mode==2 then\nbackButton.mode=1\nif not backButton._inAnimation then\nbackButton:recalculate()backButton:repaint(\"this\")end\nend\nend\nif pathsIndex>= #paths then\nif forwardButton.mode~=2 then\nforwardButton.mode=2\nif not forwardButton._inAnimation then\nforwardButton:recalculate()forwardButton:repaint(\"this\")end\nend\nelse\nif forwardButton.mode==2 then\nforwardButton.mode=1\nif not forwardButton._inAnimation then\nforwardButton:recalculate()forwardButton:repaint(\"this\")end\nend\nend\nif fs.getDir(getCurrentPath()) ==\"..\"then\nif upButton.mode~=2 then\nupButton.mode=2\nif not upButton._inAnimation then\nupButton:recalculate()upButton:repaint(\"this\")end\nend\nelse\nif upButton.mode==2 then\nupButton.mode=1\nif not upButton._inAnimation then\nupButton:recalculate()upButton:repaint(\"this\")end\nend\nend\nlocal path=getCurrentPath()if path==\"\"then\npath=\"root\"else\npath=path..\"/\"end\ninputField:setText(path)inputField:recalculate(\"this\")end\nlocal function getNameAndIconKeyExtension(name)local startI,endI=name:find(\"%.[^%.]*$\")local extension=nil\nif endI then\nextension=name:sub(startI+1,endI)name=name:sub(1,startI-1)end\nif set.neatNames==true then\nname=textutils.getNeatName(name)end\nreturn name,extension\nend\nlocal function getPathElements(folder)local list=fs.list(folder)local dirs= {}local files= {}for _,path in pairs(list)do\nlocal fullPath\nif folder~=\"\"then\nfullPath=folder..\"/\" ..path\nelse\nfullPath=path\nend\nif fs.isDir(fullPath)then\nif set.folders==true and(set.hidden==true or path:sub(1,1) ~=\".\")then\nlocal name,ext=getNameAndIconKeyExtension(path)local name=\"/\" ..name\ntable.insert(dirs,fullPath)table.insert(dirs,name)end\nelse\nif set.files==true and(set.hidden==true or path:sub(1,1) ~=\".\")then\nlocal name,ext=getNameAndIconKeyExtension(path)if set.extensions and ext then\nname=name..\".\" ..ext\nend\nif set.type==\"\"or set.type==ext then\ntable.insert(files,fullPath)table.insert(files,name)table.insert(files,ext or \"file\")end\nend\nend\nend\nreturn dirs,files\nend\nlocal function extensionIcon(parent,ext,x,y)local element=ui.element.new(parent,\"image\",x,y,3,1)local buffer=element.buffer\nfor i=1,3 do\nbuffer.text[i] =ext[1][i]buffer.textColor[i] =ext[2][i]buffer.textBackgroundColor[i] =ext[3][i]end\nreturn element\nend\nlocal function updateListView(manager,listView)listView:clear()local dirs,files=getPathElements(getCurrentPath())local x,w,y=listView:getGlobalPosX() + #listView.style.nTheme.b[4],listView:getWidth() - #listView.style.nTheme.b[4] - #listView.style.nTheme.b[6] -1,3\nif set.icons then\nx=x+4\nw=w-4\nend\nlocal elements= {}local container=listView:getContainer()for i=1, #dirs,2 do\nif set.icons then\nlocal ext=ext[\"folder\"]extensionIcon(container,ext,x-4,y)end\nlocal button=ui.button.new(container,dirs[i+1],theme.button3,x,y,w,1)button.path=dirs[i]button.onClick=function(self,event)if(event.name==\"mouse_up\"and event.param1==2)or(event.name==\"key_up\"and event.param1==29)then\nmanager:callFunction(function()local options= {}if set.edit then\nif fs.isReadOnly(getCurrentPath())or fs.isReadOnly(files[i])then\ntable.insert(options,\"*Rename\")table.insert(options,\"*Move\")table.insert(options,\"Copy\")table.insert(options,\"-\")table.insert(options,\"*Delete\")else\ntable.insert(options,\"Rename\")table.insert(options,\"Move\")table.insert(options,\"Copy\")table.insert(options,\"-\")table.insert(options,\"Delete\")end\nend\nlocal select=true\nif event.name==\"mouse_up\"then\nselect=false\nend\nif set.mode==\"select_many\"then\nif#options>0 then\ntable.insert(options,\"-\")end\ntable.insert(options,\"Select All\")table.insert(options,\"Remove All\")end\nif set.mode==\"save\"and set.type==\"/\"then\nif#options>0 then\ntable.insert(options,\"-\")end\ntable.insert(options,\"Select\")end\nif#options>0 then\nlocal y=self:getGlobalPosY() +1\nif y+ #options+2>_h+_y then\ny=y-3- #options\nif y<1 then\ny=1\nend\nend\nlocal name,indexes,select=callfile(\"os/sys/listBox.lua\", {x=self:getGlobalPosX(),y=y,manager=manager,label=\"File\",select=select,buttons=options})if name then\nif name==\"Rename\"then\nmanager.parallelManager:removeFunction(self.animation)rename(manager,listView,self,dirs[i])elseif name==\"Move\"then\nmanager.parallelManager:removeFunction(self.animation)move(manager,listView,dirs[i],select)elseif name==\"Copy\"then\nmanager.parallelManager:removeFunction(self.animation)copy(manager,listView,dirs[i],select)elseif name==\"Delete\"then\nmanager.parallelManager:removeFunction(self.animation)delete(manager,listView,dirs[i],select)elseif name==\"Select All\"then\nfor _,p in ipairs(fs.listAll(dirs[i]))do\nif isSelected(p) ==false then\naddSelection(p)end\nend\nupdateSelectionLabel(manager)elseif name==\"Remove All\"then\nfor _,p in ipairs(fs.listAll(dirs[i]))do\nremoveSelection(p)end\nupdateSelectionLabel(manager)elseif name==\"Select\"then\nlocal element=manager.element[8]element.setText(fs.getName(dirs[i]))if select then\nmanager.selectionManager:select(manager.element[8],\"key\")end\nelement:recalculateText()element:repaint(\"this\")end\nend\nmanager:draw()end\nend)else\nmanager.parallelManager:removeFunction(self.animation)addPath(dirs[i])updateListView(manager,listView)updateButton(manager)if event.name~=\"mouse_up\"then\nif listView:getContainer().element[1]then\nmanager.selectionManager:select(listView.selectionGroup,\"key\",3)else\nmanager.selectionManager:select(manager.selectionManager.groups[2].elements[1],\"key\",3)end\nend\nmanager:draw()end\nend\ntable.insert(elements,button)y=y+1\nend\nfor i=1, #files,3 do\nlocal ext=ext[files[i+2]]or ext[\"file\"]if set.icons then\nextensionIcon(container,ext,x-4,y)end\nlocal buttonTheme=theme.button3\nif set.mode==\"select_many\"and isSelected(files[i])then\nbuttonTheme=theme.button4\nend\nlocal button=ui.button.new(container,files[i+1],buttonTheme,x,y,w,1)button.path=files[i]button.onClick=function(self,event)if(event.name==\"mouse_up\"and event.param1==2)or(event.name==\"key_up\"and event.param1==29)then\nmanager:callFunction(function()local options= {}if set.edit then\nif fs.isReadOnly(getCurrentPath())or fs.isReadOnly(files[i])then\ntable.insert(options,\"*Rename\")table.insert(options,\"*Move\")table.insert(options,\"Copy\")table.insert(options,\"-\")table.insert(options,\"*Delete\")else\ntable.insert(options,\"Rename\")table.insert(options,\"Move\")table.insert(options,\"Copy\")table.insert(options,\"-\")table.insert(options,\"Delete\")end\nend\nif#options>0 then\nlocal select=true\nif event.name==\"mouse_up\"then\nselect=false\nend\nlocal y=self:getGlobalPosY() +1\nif y+ #options+2>_h+_y then\ny=y-3- #options\nif y<1 then\ny=1\nend\nend\nlocal name,indexes,select=callfile(\"os/sys/listBox.lua\", {x=self:getGlobalPosX(),y=y,manager=manager,label=\"File\",select=select,buttons=options})if name then\nif name==\"Rename\"then\nmanager.parallelManager:removeFunction(self.animation)rename(manager,listView,self,files[i])elseif name==\"Move\"then\nmanager.parallelManager:removeFunction(self.animation)move(manager,listView,files[i],select)elseif name==\"Copy\"then\nmanager.parallelManager:removeFunction(self.animation)copy(manager,listView,files[i],select)elseif name==\"Delete\"then\nmanager.parallelManager:removeFunction(self.animation)delete(manager,listView,files[i],select)end\nend\nmanager:draw()end\nend)else\nif set.mode==\"select_many\"then\nif isSelected(files[i])then\nself.style=theme.button3\nremoveSelection(files[i])else\nself.style=theme.button4\naddSelection(files[i])end\nupdateSelectionLabel(manager)if not self._inAnimation then\nself:recalculate()self:repaint(\"this\")end\nelseif set.mode==\"save\"then\nif set.type~=\"/\"then\nlocal element=manager.element[8]element:setText(fs.getName(files[i]))manager.selectionManager:select(element,\"key\",3)element:recalculateText()element:repaint(\"this\")end\nelseif set.mode==\"select_one\"then\nret= {files[i]}manager:exit()else\nmanager:callFunction(function()callfile(\"os/sys/execute.lua\",ext[4]or \"rom/programs/edit.lua\",files[i])manager:draw()end)end\nend\nend\ntable.insert(elements,button)y=y+1\nend\nif#elements>0 then\nfor i=1, #elements do\nlistView.selectionGroup:addElement(elements[i],nil,elements[i-1],nil,elements[i+1])end\nelements[1].select.up=manager.selectionManager.groups[3]local pathGroup=manager.selectionManager.groups[3]pathGroup.elements[1].select.down=elements[1]pathGroup.next=listView.selectionGroup\nif hasUnderMenu then\nlocal underMenuGroup=manager.selectionManager.groups[4]elements[#elements].select.down=underMenuGroup\nunderMenuGroup.previous=listView.selectionGroup\nfor i=1, #underMenuGroup.elements do\nunderMenuGroup.elements[i].select.up=elements[#elements]end\nend\nelse\nlocal pathGroup=manager.selectionManager.groups[3]if hasUnderMenu then\nlocal underMenuGroup=manager.selectionManager.groups[4]pathGroup.next=underMenuGroup\nunderMenuGroup.previous=pathGroup\npathGroup.elements[1].select.down=underMenuGroup\nfor i=1, #underMenuGroup.elements do\nunderMenuGroup.elements[i].select.up=pathGroup\nend\nelse\nlocal menuGroup=manager.selectionManager.groups[2]pathGroup.next=menuGroup\npathGroup.current.select.down=nil\nmenuGroup.previous=pathGroup\nend\nend\nlistView.selectionGroup.current=elements[1]listView:recalculate()listView:resetLayout()end\nlocal function nameItem(manager,text,submit,x,y,w,h)local field=ui.inputField.new(manager,\"\",text,false,theme.iField2,x,y,w,h)local selectionGroup=manager.selectionManager:addNewGroup(manager.selectionManager.current,manager.selectionManager.current)selectionGroup:addElement(field)function selectionGroup:listener(eventName,source, ...)if eventName==\"selection_lose_focus\"then\nlocal current,new= ...field.mode=1\nfield:setParent(nil)manager.selectionManager:removeGroup(selectionGroup)manager:repaint(\"this\")return true\nend\nend\nfield._onSubmit=submit\nmanager.selectionManager:select(field,\"code\",3)end\nrename=function(manager,listView,element,path)local name=fs.getName(path)local path=path:sub(1,path:len() -name:len())local submit=function(self,event,text)local newPath=path..text\nif text~=\"\"and fs.exists(newPath) ==false then\nfs.move(path..name,newPath)end\nupdateListView(manager,listView)for _,e in ipairs(listView:getContainer().element)do\nif e.path==newPath then\nmanager.selectionManager:select(e,\"code\",3)return\nend\nend\nmanager.selectionManager:select(listView.selectionGroup,\"code\",3)end\nnameItem(manager,name,submit,element:getGlobalRect())end\ncreate=function(manager,listView,name,path,isDir)local submit=function(self,event,text)local newPath=fs.combine(path,text)if text~=\"\"then\nif fs.exists(newPath)then\nif isDir then\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text=\"Directory already exist.\\nA new Directory is not created.\",label=\"Directory already exist\",select=true,button1=\"Ok\"})manager:draw()return\nelse\nif callfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text=\"File already exist.\\nShould the file still be created?\",label=\"File already exist\",select=true,button1=\"Cancel\",button2=\"Create\"}) ==1 then\nmanager:draw()return\nend\nend\nend\nif isDir then\nfs.makeDir(newPath)else\nlocal file=io.open(newPath,\"w+\")file:close()end\nupdateListView(manager,listView)for _,e in ipairs(listView:getContainer().element)do\nif e.path==newPath then\nmanager.selectionManager:select(e,\"code\",3)return\nend\nend\nmanager.selectionManager:select(listView.selectionGroup,\"code\",3)end\nend\nnameItem(manager,name,submit,1,2,_w,1)end\ndelete=function(manager,listView,path,select)if fs.isReadOnly(path)then\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text=\"Directory is read only.\",label=\"Directory is read only\",select=true,button1=\"Ok\"})else\nif callfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text= (\"Do you realy want to delete %q?\\nA recovery is not possible\"):format(fs.getName(path)),label=\"Delete\",select=select,button1=\"Cancel\",button2=\"Delete\"}) ==1 then\nelse\nfs.delete(path)updateListView(manager,listView)if select then\nif listView:getContainer().element[1]then\nmanager.selectionManager:select(listView.selectionGroup,\"key\",3)else\nmanager.selectionManager:select(manager.selectionManager.groups[2].elements[1],\"key\",3)end\nend\nend\nend\nmanager:draw()end\nmove=function(manager,listView,path,select)local isDir=fs.isDir(path)local name=fs.getName(path)local path=path:sub(1,path:len() -name:len())local save=callfile(\"os/sys/explorer/main.lua\", {select=select,mode=\"move\",files=false,path=path,move=name,edit=false})if save then\nlocal newPath=fs.combine(save,name)local startPath=path..name\nif\npcall(function()fs.move(path..name,newPath)end)then\nmanager:draw()updateListView(manager,listView)else\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text=\"Access denied.\\nFile could not be moved.\",label=\"Move file failed\",select=select,button1=\"Ok\"})end\nend\nend\ncopy=function(manager,listView,path,select)local dirPath,name=fs.getDir(path),fs.getName(path)local save=callfile(\"os/sys/explorer/main.lua\", {select=select,mode=\"move\",files=false,path=dirPath,move=name,edit=false})if save then\nif fs.isReadOnly(save)then\ncallfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text=\"Access denied.\\nFolder is read only.\",label=\"Copy file failed\",select=select,button1=\"Ok\"})else\nif save==dirPath then\nlocal dir=fs.getDir(path)local name=fs.getClearName(path)local ext=fs.getExtension(path)local i=1\nlocal newPath\nrepeat\nif ext then\nnewPath=fs.combine(dir, (\"%s (%i).%s\"):format(name,i,ext))else\nnewPath=fs.combine(dir, (\"%s (%i)\"):format(name,i))end\ni=i+1\nuntil not fs.exists(newPath)fs.copy(path,newPath)else\nlocal T,t\nif fs.isDir(path)then\nT=\"Directory\"t=\"directory\"else\nT=\"File\"t=\"file\"end\nlocal newPath=fs.combine(save,name)if fs.exists(newPath)then\nif callfile(\"os/sys/infoBox.lua\", {x=_x+2,y=_y+2,w=_w-4,h=_h-4,text= (\"%s already exist.\\nShould the %s still be created?\"):format(T,t),label= (\"%s already exist\"):format(T),select=true,button1=\"Cancel\",button2=\"Copy\"}) ==2 then\nfs.delete(newPath)fs.copy(path,newPath)end\nelse\nfs.copy(path,newPath)end\nend\nend\nend\nmanager:draw()end\naddPath(set.path)local manager=ui.uiManager.new(1,1,_w,_h)local index\nfor i=1,_w*_h do\nif i<=_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.green\nmanager.buffer.textBackgroundColor[i] =colors.green\nelseif i<=2*_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.lime\nmanager.buffer.textBackgroundColor[i] =colors.lime\nelse\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.white\nmanager.buffer.textBackgroundColor[i] =colors.white\nend\nend\nlocal fileButton=ui.button.new(manager,\"File\",theme.button1,1,1,6,1)local exitButton=ui.button.new(manager,\"<\",theme.button2,_w-2,1,3,1)local upButton=ui.button.new(manager,\"^\",theme.button1,8,1,3,1)local backButton=ui.button.new(manager,\"<\",theme.button1,11,1,3,1)local forwardButton=ui.button.new(manager,\">\",theme.button1,14,1,3,1)local pathField=ui.inputField.new(manager,\"\",getCurrentPath(),false,theme.iField2,1,2,_w,1)local listView=ui.scrollView.new(manager,nil,3,theme.sView1,1,3,_w,_h-2)local backgroundListView=listView.element[1]local backgroundListViewBuffer=backgroundListView.buffer\nfor i=1,_h-1 do\nif set.icons==true then\nindex= (i-1) * (_w-1) +4\nbackgroundListViewBuffer.text[index] =\"|\"backgroundListViewBuffer.textColor[index] =colors.black\nbackgroundListViewBuffer.textBackgroundColor[index] =colors.white\nend\nindex= (i-1) * (_w-1) +_w-1\nbackgroundListViewBuffer.text[index] =\"|\"backgroundListViewBuffer.textColor[index] =colors.black\nbackgroundListViewBuffer.textBackgroundColor[index] =colors.white\nend\nfunction pathField:onSuggestCompletion(text,offset)if text:len() ==offset then\nlocal startI,endI=text:match(\"%/.*$\")if startI==nil or endI==nil then\nself.autoComplete=fs.complete(text,\"\",false,false)else\nself.autoComplete=fs.complete(text:sub(endI),text:sub(1,startI),false,true)end\nelse\nself.autoComplete= {}end\nend\nfunction pathField:onAutoCompletion(text,offset,completion)if offset==text:len()then\nreturn true,text..completion,text:len() +completion:len()else\nreturn false\nend\nend\nfunction pathField:_onSubmit(event,text)if text==\"root\"then\ntext=\"\"end\nlocal currentPath=getCurrentPath()if currentPath==\"..\"then\ncurrentPath=\"\"end\nif fs.isDir(text)and text~=currentPath then\nif text:sub(text:len()) ==\"/\"then\ntext=text:sub(1,text:len() -1)end\naddPath(text)updateButton(manager)updateListView(manager,listView)else\nupdateButton(manager)updateListView(manager,listView)end\nmanager:draw()end\nfunction fileButton:onClick(event)local select=true\nif event.name==\"mouse_up\"then\nselect=false\nfileButton.mode=3\nfileButton:recalculate()end\nmanager:callFunction(function()local options= {}if fs.isReadOnly(getCurrentPath())then\ntable.insert(options,\"*New Folder\")table.insert(options,\"*New File\")elseif set.edit==true then\ntable.insert(options,\"New Folder\")table.insert(options,\"New File\")elseif set.mode==\"move\"or set.mode==\"save\"then\ntable.insert(options,\"New Folder\")table.insert(options,\"*New File\")end\nif#options>0 then\nlocal name=callfile(\"os/sys/listBox.lua\", {x=1,y=1,manager=manager,label=\"File\",select=select,buttons=options})if name then\nif name==\"New Folder\"then\ncreate(manager,listView,\"New Folder\",getCurrentPath(),true)elseif name==\"New File\"then\ncreate(manager,listView,\"New File.txt\",getCurrentPath(),false)end\nend\nmanager:draw()end\nend)end\nfunction upButton:onClick(event)addPath(fs.getDir(getCurrentPath()))updatePath()updateButton(manager)if self.mode==2 then\nlocal group=manager.selectionManager.groups[2]group.current=fileButton\nif event.name~=\"mouse_up\"then\nmanager.selectionManager:select(group,\"code\",3)else\nmanager.selectionManager:select(group,\"code\",1)end\nend\nupdateListView(manager,listView)manager:draw()end\nfunction backButton:onClick(event)pathsIndex=pathsIndex-1\nupdatePath()updateButton(manager)if self.mode==2 then\nlocal group=manager.selectionManager.groups[2]group.current=fileButton\nif event.name~=\"mouse_up\"then\nmanager.selectionManager:select(group,\"code\",3)else\nmanager.selectionManager:select(group,\"code\",1)end\nend\nupdateListView(manager,listView)manager:draw()end\nfunction forwardButton:onClick(event)pathsIndex=pathsIndex+1\nupdatePath()updateButton(manager)if self.mode==2 then\nlocal group=manager.selectionManager.groups[2]group.current=fileButton\nif event.name~=\"mouse_up\"then\nmanager.selectionManager:select(group,\"code\",3)else\nmanager.selectionManager:select(group,\"code\",1)end\nend\nupdateListView(manager,listView)manager:draw()end\nfunction exitButton:onClick(event)term.setCursorPos(1,1)if term.isColor()then\nterm.setBackgroundColor(colors.black)term.setTextColor(colors.white)end\nterm.clear()manager:exit()end\nmanager.selectionManager:addGroup(listView.selectionGroup)local menuGroup=manager.selectionManager:addNewGroup(listView.selectionGroup)local pathGroup=manager.selectionManager:addNewGroup(menuGroup,listView.selectionGroup)menuGroup.next=pathGroup\nmenuGroup.previous=listView.selectionGroup\nlistView.selectionGroup.next=menuGroup\nlistView.selectionGroup.previous=pathGroup\nmenuGroup:addElement(fileButton,nil,nil,upButton,pathGroup)menuGroup:addElement(upButton,fileButton,nil,backButton,pathGroup)menuGroup:addElement(backButton,upButton,nil,forwardButton,pathGroup)menuGroup:addElement(forwardButton,backButton,nil,exitButton,pathGroup)menuGroup:addElement(exitButton,forwardButton,nil,nil,pathGroup)pathGroup:addElement(pathField,nil,menuGroup,nil,listView.selectionGroup)menuGroup.current=fileButton\npathGroup.current=pathField\nif set.mode==\"save\"then\nlistView:setGlobalRect(nil,nil,nil,listView:getHeight() -1)listView:resetLayout()local saveField=ui.inputField.new(manager,\"\",set.save,false,theme.iField2,1,_h,_w-6,1)local saveButton=ui.button.new(manager,\"Save\",theme.button1,_w-5,_h,6,1)local function checkButton(text)if text:len() >0 and(set.override==true or not fs.exists(getCurrentPath() ..\"/\" ..text))then\nreturn true\nelse\nreturn false\nend\nend\nfunction saveField:_onSubmit(event,text)if checkButton(text)then\nsaveButton:onClick(event)end\nend\nfunction saveField:onTextEdit(event, ...)if event==\"char\"or event==\"paste\"then\nlocal var1= ...local text=self.text:sub(1,self.cursorOffset) ..var1..self.text:sub(self.cursorOffset+1)if checkButton(text)then\nsaveButton:changeMode(1,true)else\nsaveButton:changeMode(2,true)end\nreturn var1\nelseif event==\"text\"then\nlocal text= ...if checkButton(text)then\nsaveButton:changeMode(1,true)else\nsaveButton:changeMode(2,true)end\nreturn text\nelseif event==\"delete\"then\nif checkButton(self.text)then\nsaveButton:changeMode(1,true)else\nsaveButton:changeMode(2,true)end\nend\nend\nfunction saveButton:onClick(event)if saveField~=\"\"then\ntable.insert(ret,getCurrentPath() ..\"/\" ..saveField.text)end\nsaveField.mode=1\nmanager:exit()end\nlocal saveMenuGroup=manager.selectionManager:addNewGroup(listView.selectionGroup,menuGroup)menuGroup.previous=saveMenuGroup\nlistView.selectionGroup.next=saveMenuGroup\nsaveMenuGroup:addElement(saveField,nil,nil,nil,nil)saveMenuGroup:addElement(saveButton,saveField,nil,nil,nil)saveMenuGroup.current=saveField\nhasUnderMenu=true\nelseif set.mode==\"move\"then\nlistView:setGlobalRect(nil,nil,nil,listView:getHeight() -1)listView:resetLayout()local label=ui.label.new(manager,set.move,theme.label1,1,_h,_w-6,1)local moveButton=ui.button.new(manager,\"Move\",theme.button1,_w-5,_h,6,1)function moveButton:onClick(event)table.insert(ret,getCurrentPath())manager:exit()end\nlocal moveMenuGroup=manager.selectionManager:addNewGroup(listView.selectionGroup,menuGroup)menuGroup.previous=moveMenuGroup\nlistView.selectionGroup.next=moveMenuGroup\nmoveMenuGroup:addElement(moveButton,nil,nil,nil)moveMenuGroup.current=moveButton\nhasUnderMenu=true\nelseif set.mode==\"select_many\"then\nlistView:setGlobalRect(nil,nil,nil,listView:getHeight() -1)listView:resetLayout()local selectedLabel=ui.label.new(manager,tostring(#set.items),theme.label1,1,_h,_w-15,1)local clearSelectionButton=ui.button.new(manager,\"Clear\",theme.button1,_w-14,_h,7,1)clearSelectionButton.onClick=function(event)while#set.items>0 do\ntable.remove(set.items)end\nupdateSelectionLabel(manager)updateListView(manager,listView)manager:draw()end\nlocal selectSelectionButton=ui.button.new(manager,\"Select\",theme.button1,_w-7,_h,8,1)selectSelectionButton.onClick=function()table.insert(ret,set.items)manager:exit()end\nlocal selectionMenuGroup=manager.selectionManager:addNewGroup(listView.selectionGroup,menuGroup)menuGroup.previous=selectionMenuGroup\nlistView.selectionGroup.next=selectionMenuGroup\nselectionMenuGroup:addElement(clearSelectionButton,nil,nil,selectSelectionButton,nil)selectionMenuGroup:addElement(selectSelectionButton,clearSelectionButton,nil,nil,nil)selectionMenuGroup.current=selectSelectionButton\nhasUnderMenu=true\nend\nupdateButton(manager)updateListView(manager,listView)local mode=3\nif set.select==false then\nmode=1\nend\nmanager.selectionManager:select(menuGroup,\"code\",mode)manager:draw()manager:execute()return table.unpack(ret)\n",["os/sys/browser/install.lua"] = "local path,mode,data=\"os/sys/browser/data/installed\", ...local list=dofile(path)if mode~=1 and mode~=2 then\nerror(\"mode needs to be set to a valid number\",2)end\nfor i,v in ipairs(list)do\nif v.name==data.name then\ntable.remove(list,i)end\nend\nif mode==1 then\ntable.insert(list, {name=data.name,version=data.version,delete=data.delete})end\ntable.save(list,path)\n",["os/api/ui/textBox.lua"] = "ui.textBox= {}function ui.textBox.new(parent,label,text,style,x,y,w,h,key)local this=ui.element.new(parent,\"textBox\",x,y,w,h,key)this.stylePadding=ui.padding.new(#style.nTheme.b[4], #style.nTheme.b[2], #style.nTheme.b[6], #style.nTheme.b[8])ui.element.new(this,\"container\",this.stylePadding:getPaddedRect(this.buffer.rect:getUnpacked()))ui.text.new(this.element[1],text,style.text,this.element[1]:getGlobalRect())local slideWidth= #style.slider.nTheme.handleL\nui.slider.new(this,1,0,this.element[1].element[1]:getHeight(),this.element[1]:getHeight(),style.slider,x+w-math.max(math.ceil((this.stylePadding.right+slideWidth) /2),slideWidth),y+this.stylePadding.top,slideWidth,h-this.stylePadding.top-this.stylePadding.bottom,\"v\")this.label=label\nthis.richText=richText\nthis.style=style\nthis.selectionGroup=ui.selectionGroup.new(nil,nil)this.selectable=false\nthis.scrollWithoutSelection=true\nfunction this:resizeSlider()local slider=self.element.v\nslider.value=0\nslider.startValue=0\nslider.endValue=self.element[1].element[1]:getHeight()slider:recalculate()end\nfunction this:resetLayout()self.stylePadding:set(#self.style.nTheme.b[4], #self.style.nTheme.b[2], #self.style.nTheme.b[6], #self.style.nTheme.b[8])local x,y,w,h=self:getGlobalRect()local container=self.element[1]container:setGlobalRect(self.stylePadding:getPaddedRect(self.buffer.rect:getUnpacked()))local label=self.element[1].element[1]label.style=self.style.label\nlabel:setGlobalRect(container:getGlobalRect())label:recalculate()local slider=self.element.v\nslider.style=self.style.slider\nlocal slideWidth= #self.style.slider.nTheme.handleL\nlocal x,y,w,h=self:getGlobalRect()slider:setLocalRect(x+w-math.max(math.ceil((self.stylePadding.right+slideWidth) /2),slideWidth),y+self.stylePadding.top,slideWidth,h-self.stylePadding.top-self.stylePadding.bottom)this:resizeSlider()end\nfunction this:setText(text)self.element[1].element[1].text=text\nself.element[1].element[1]:recalculate()end\nfunction this.onValueChange(value)local maxMove=0\nlocal label=this.element[1].element[1]if value>0 then\nmaxMove=math.max(0,math.min(value,label:getLocalPosY() +label:getHeight() - (this:getHeight() -this.stylePadding.bottom)))elseif value<0 then\nmaxMove=math.min(0,math.max(value,label:getLocalPosY() -this.stylePadding.top))end\nif maxMove~=0 then\nlocal slider=this.element.v\nlabel:setLocalRect(nil, -maxMove,nil,nil)slider.value=slider.value+maxMove\nslider:recalculate()this:repaint(\"this\",this.buffer.rect:getUnpacked())return true\nend\nreturn false\nend\nfunction this:normalEvent(event)if(self.scrollWithoutSelection or not self.selectable or self.mode==3)and event.name==\"mouse_scroll\"then\nself.onValueChange(event.param1)return this\nend\nend\nfunction this:pointerEvent(event,x,y,w,h)if self.selectable and event.name==\"mouse_click\"and self.mode~=3 then\nx,y,w,h=ui.rect.overlaps(x,y,w,h,self.buffer.rect:getUnpacked())if event.param2>=x and event.param2<x+w and event.param3>=y and event.param3<y+h then\nself:getManager().selectionManager:select(self.selectionGroup,\"mouse\",1)return self\nend\nend\nend\nfunction this:recalculate()local theme\nlocal labelTheme\nif self.mode==1 then\ntheme=self.style.nTheme\nlabelTheme=self.style.label.nTheme\nelseif self.mode==2 then\ntheme=self.style.dTheme\nlabelTheme=self.style.label.dTheme\nelse\ntheme=self.style.sTheme\nlabelTheme=self.style.label.sTheme\nend\nui.buffer.fill(self.buffer,\" \",theme.sTC,theme.sTC)ui.buffer.borderBox(self.buffer,theme.b,theme.bC,theme.bBG)if self.label then\nui.buffer.labelBox(self.buffer,labelTheme.prefix..self.label..labelTheme.suffix,labelTheme.tC,labelTheme.tBG,self.style.label.align,nil,self.stylePadding.left,0,self.stylePadding.right,self.buffer.rect.h-self.stylePadding.top)end\nend\nfunction this.selectionGroup:listener(eventName,source, ...)if eventName==\"key\"then\nlocal key= ...if key==200 or key==17 then\nif this.element.v.repeatItem:call()then\nreturn not this.onValueChange(-1)end\nreturn false\nelseif key==208 or key==31 then\nif this.element.v.repeatItem:call()then\nreturn not this.onValueChange(1)end\nreturn false\nend\nelseif eventName==\"key_up\"then\nthis.element.v.repeatItem:reset()elseif eventName==\"selection_lose_focus\"then\nlocal currentElement,newElement= ...if newElement==nil and source==\"mouse\"then\nreturn false\nelse\nthis:changeMode(1)end\nelseif this.selectable and eventName==\"selection_get_focus\"then\nlocal currentElement,newElement= ...this:changeMode(3)if newElement==this then\nif source~=\"mouse\"then\nself.current:changeMode(3)end\nreturn false\nend\nelseif eventName==\"selection_change\"then\nlocal currentElement,newElement= ...if newElement==this or newElement==this.element.v then\nreturn false\nend\nend\nend\nui.buffer.fill(this.element[1].buffer,\" \",this.style.nTheme.sTC,this.style.nTheme.sTC)this.selectionGroup:addElement(this)this.selectionGroup.current=this\nthis.selectionGroup:addElement(this.element.v)this.element.v.onValueChange=this.onValueChange\nthis:recalculate()return this\nend\n",["os/api/ui/theme.lua"] = "ui.theme= {}function ui.theme.load(name)local path=\"os/theme/\" ..name\nlocal path2=\"os/theme/_\" ..name\nif fs.exists(path2)then\ndofile(path2)end\nreturn fs.doFile(path)end\n",["os/api/ui/text.lua"] = "ui.text= {}function ui.text.new(parent,text,style,x,y,w,h,key)local this=ui.element.new(parent,\"text\",x,y,w,h,key)this.style=style\nthis.text=text\nthis.richText=true\nthis.scaleW=false\nthis.scaleH=true\nfunction this:recalculate()local theme=nil\nif self.mode==2 then\ntheme=self.style.dTheme\nelse\ntheme=self.style.nTheme\nend\nui.buffer.text(self.buffer,self.text,theme.tC,theme.tBG,self.style.align,this.scaleW,this.scaleH,self.richText)end\nthis:recalculate()return this\nend\n",["startup"] = "dofile(\"os/init.lua\")local list=fs.listAll(\"os/startup\")for k,v in pairs(list)do\ncallfile(\"os/sys/execute.lua\",{file=v,select=true,args= {}})end\ndofile(\"os/main.lua\")\n",["os/sys/explorer/default.lua"] = "return{icons=true,hidden=false,extensions=true,neatNames=false,pathsSize=20,type=\"\",edit=true}\n",["os/api/ui/selectionGroup.lua"] = "ui.selectionGroup= {}function ui.selectionGroup.new(previous,next,listener)local this=class.new(\"selectionGroup\")this.previous,this.next=previous,next\nthis.elements= {}this.current=nil\nthis.listener=listener\nfunction this:hasElement(element)for k,v in pairs(self.elements)do\nif v==element then\nreturn true\nend\nend\nreturn false\nend\nfunction this:addElement(element,left,up,right,down,reverse)element.select.left=left\nelement.select.up=up\nelement.select.right=right\nelement.select.down=down\ntable.insert(self.elements,element)if reverse then\nfor k,v in pairs(self.elements)do\nif v==left then\nv.select.right=element\nelseif v==up then\nv.select.down=element\nelseif v==right then\nv.select.left=element\nelseif v==down then\nv.select.up=element\nend\nend\nend\nend\nfunction this:removeElement(element,reference)for k,v in pairs(self.elements)do\nif v==element then\ntable.removeAt(self.elements,k)if not reference then\nreturn\nend\nend\nif reference then\nfor k,v2 in pairs(v.select)do\nif v2==element then\nv.select[k] =nil\nend\nend\nend\nend\nend\nfunction this:callListener(name,source, ...)if not self.listener or self:listener(name,source, ...) ~=false then\nreturn true\nend\nreturn false\nend\nreturn this\nend\n",["os/sys/browser/main.lua"] = "\nlocal defaultPasteBin=\"ZbWvc7x9\"local _x,_y,_w,_h=1,1,term.getSize()local sortType=3\nlocal official,unofficial,installed,list,updateSView\nlocal function getInstalled(name)for k,v in pairs(installed)do\nif v.name==name then\nreturn true,v.version,v.delete\nend\nend\nreturn false\nend\nlocal function applyData(list,removable)for k,v in pairs(list)do\nv.removable=removable\nlocal installed,version,delete=getInstalled(v.name)if installed then\nv.status=2\nfor i=1,math.min(#v.version or 0, #version)do\nif v.version[i] >version[i]then\nv.status=1\nv.versionOld=version\nbreak\nend\nend\nv.deleteOld=delete\nelse\nif(v.type==\"all\"or(pocket and v.type:find(\"p\"))or(turtle and v.type:find(\"t\"))or v.type:find(\"d\"))and(term.isColor()or not v.color)then\nv.status=3\nelse\nv.status=4\nend\nend\nend\nend\nlocal function sortFiles()list=table.combine(official,unofficial)if sortType>1 then\ntable.orderComplex(list,function(data)return data.name:byte(1,data.name:len())end)if sortType==3 then\ntable.orderComplex(list,function(data)return data.status\nend)end\nend\nend\nlocal function updateFiles(mode)callfile(\"os/sys/wait.lua\",\"Downloading\",function()local l1,l2,l3=callfile(\"os/sys/browser/getList.lua\",mode)installed=l3\nif mode then\nofficial=l1\nend\nunofficial=l2\napplyData(official,false)applyData(unofficial,true)sortFiles()end)end\nlocal function createSViewButton(manager,sView,official,data,elements,x,y,w,h)local container=sView:getContainer()local name=data.name\nlocal image=ui.element.new(container,\"image\",x,y,1,h)if data.status==1 then\nimage.buffer.text[1] =\"\\21\"image.buffer.textColor[1] =colors.orange\nelseif data.status==2 then\nimage.buffer.text[1] =\"\\25\"image.buffer.textColor[1] =colors.green\nelseif data.status==3 then\nimage.buffer.text[1] =\"\\7\"image.buffer.textColor[1] =colors.blue\nelse\nimage.buffer.text[1] =\"x\"image.buffer.textColor[1] =colors.red\nend\nimage.buffer.textBackgroundColor[1] =colors.white\nlocal button_item=ui.button.new(container,name,theme.button3,x+2,y,w-5,h)function button_item:onClick(event)manager.parallelManager:removeFunction(self.animation)manager:callFunction(function()callfile(\"os/sys/browser/info.lua\",data)updateFiles(false)updateSView(manager,sView)manager:draw()end)end\ntable.insert(elements,button_item)end\nfunction updateSView(manager,sView)sView:clear()local container=sView:getContainer()local elements= {}local x,y,w,h=1,2,_w-1,1\nfor _,data in ipairs(list)do\ncreateSViewButton(manager,sView,true,data,elements,x,y,w,h)y=y+1\nend\nlocal group_menu=manager.selectionManager.groups[1]if#elements>0 then\nfor i=1, #elements do\nsView.selectionGroup:addElement(elements[i],nil,elements[i-1],nil,elements[i+1])end\nsView.selectionGroup.current=elements[1]elements[1].select.up=group_menu\ngroup_menu.next=sView.selectionGroup\ngroup_menu.previous=sView.selectionGroup\nfor i=1, #group_menu.elements do\ngroup_menu.elements[i].select.down=sView.selectionGroup\nend\nelse\ngroup_menu.next=nil\ngroup_menu.previous=nil\nfor i=1, #group_menu.elements do\ngroup_menu.elements[i].select.down=nil\nend\nend\nsView:resizeContainer()sView:recalculate()end\nlocal manager=ui.uiManager.new(_x,_y,_w,_h)local index\nfor i=1,_w*_h do\nif i<=_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.green\nmanager.buffer.textBackgroundColor[i] =colors.green\nelseif i<=2*_w then\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.lime\nmanager.buffer.textBackgroundColor[i] =colors.lime\nelse\nmanager.buffer.text[i] =\" \"manager.buffer.textColor[i] =colors.white\nmanager.buffer.textBackgroundColor[i] =colors.white\nend\nend\nlocal button_update=ui.button.new(manager,\"\\21\",theme.button1,1,1,3,1)local button_upload=ui.button.new(manager,\"\\24\",theme.button1,5,1,3,1)local button_download=ui.button.new(manager,\"\\25\",theme.button1,9,1,3,1)local button_sort=ui.button.new(manager,\"Sort\",theme.button1,_w-11,1,6,1)local button_option=ui.button.new(manager,\"\\164\",theme.button1,_w-5,1,3,1)local button_exit=ui.button.new(manager,\"<\",theme.button2,_w-2,1,3,1)local sView_list=ui.scrollView.new(manager,\"\",3,theme.sView1,1,2,_w,_h-1)local group_menu=manager.selectionManager:addNewGroup()group_menu:addElement(button_update,nil,nil,button_upload,sView_list.selectionGroup)group_menu:addElement(button_upload,button_update,nil,button_download,sView_list.selectionGroup)group_menu:addElement(button_download,button_upload,nil,button_option,sView_list.selectionGroup)group_menu:addElement(button_option,button_download,nil,button_exit,sView_list.selectionGroup)group_menu:addElement(button_exit,button_option,nil,nil,sView_list.selectionGroup)group_menu.current=button_update\nmanager.selectionManager:addGroup(sView_list.selectionGroup)sView_list.selectionGroup.previous=group_menu\nsView_list.selectionGroup.next=group_menu\nupdateFiles(true)updateSView(manager,sView_list)function button_exit:onClick(event)manager:exit()end\nfunction button_update:onClick(event)manager:callFunction(function()updateFiles(true)updateSView(manager,sView_list)manager:draw()end)end\nfunction button_download:onClick(event)manager:callFunction(function()callfile(\"os/sys/browser/loader.lua\", {mode=2})updateFiles(false)updateSView(manager,sView_list)manager:draw()end)end\nfunction button_upload:onClick(event)manager:callFunction(function()callfile(\"os/sys/browser/loader.lua\", {mode=1})updateFiles(false)updateSView(manager,sView_list)manager:draw()end)end\nfunction button_sort:onClick(event)manager:callFunction(function()local buttons= {\"Normal\",\"Name\",\"Status\",\"Version\",\"Type\"}buttons[sortType] =\"*\" ..buttons[sortType]local name=callfile(\"os/sys/listBox.lua\", {x=_w-11,y=1,w=10,h=6,label=\"Sort\",buttons=buttons,manager=manager})for i,v in ipairs(buttons)do\nif v==name then\nsortType=i\nsortFiles()updateSView(manager,sView_list)break\nend\nend\nmanager:draw()end)end\nmanager.selectionManager:select(sView_list.selectionGroup,\"code\",3)manager:draw()manager:execute()\n",["os/sys/explorer/excludedPaths.lua"] = "return{\"os/system\",\"api\"}\n",["os/api/ui/selectionManager.lua"] = "ui.selectionManager= {}function ui.selectionManager.new()local this=class.new(\"selectionManager\")this.groups= {}this.current=nil\nthis.repeatItem=ui.repeatItem.new(0.8,0.1,0.8)function this:select(var1,source,mode)if mode==true then\nmode=3\nelseif mode==false then\nmode=1\nend\nlocal newElement=var1.current\nlocal currentElement\nif var1:isClass(\"element\")then\nlocal newGroup\nfor k,v in pairs(self.groups)do\nif v:hasElement(var1)then\nnewGroup=v\nbreak\nend\nend\nif not newGroup then\nreturn\nend\nif newGroup and newGroup==self.current and newGroup.current~=var1 then\nif newGroup:callListener(\"selection_change\",source,newGroup.current,var1)then\nnewGroup.current:changeMode(1)newGroup.current=var1\nnewGroup.current:changeMode(mode)end\nreturn\nelse\nnewElement=var1\nvar1=newGroup\nend\nend\nif self.current==var1 then\nlocal current=var1.current\nif var1:callListener(\"selection_reselect\",source,current)then\ncurrent:changeMode(mode)end\nelse\nif self.current then\ncurrentElement=self.current.current\nend\nif(not self.current or self.current:callListener(\"selection_lose_focus\",source,currentElement,newElement))and var1:callListener(\"selection_get_focus\",source,currentElement,newElement)then\nif currentElement then\ncurrentElement:changeMode(1)end\nself.current=var1\nself.current.current=newElement\nnewElement:changeMode(mode)end\nend\nend\nfunction this:deselect(source)if self.current:callListener(\"selection_lose_focus\",source,self.current.current)then\nself.current.current:changeMode(1)end\nend\nfunction this:keyEvent(event)if event.name==\"key\"then\nif not self.current or not self.current:callListener(\"key\",\"key\",event.param1,event.param2)or self.repeatItem:call() ==false then\nreturn\nend\nlocal currentGroup=self.current\nlocal currentElement=self.current.current\nif currentElement then\nif currentElement.mode>1 then\nlocal direction\nif event.param1==15 or event.param1==18 then\nif currentGroup.next then\nself:select(currentGroup.next,\"key\",3)end\nreturn\nelseif event.param1==16 then\nif currentGroup.previous then\nself:select(currentGroup.previous,\"key\",3)end\nreturn\nelseif event.param1==203 or event.param1==30 then\ndirection=\"left\"elseif event.param1==200 or event.param1==17 then\ndirection=\"up\"elseif event.param1==205 or event.param1==32 then\ndirection=\"right\"elseif event.param1==208 or event.param1==31 then\ndirection=\"down\"end\nif direction then\nlocal newElement=currentElement.select[direction]if newElement and newElement:isType(\"selectionGroup\")then\nnewElement=newElement.current\nend\nwhile newElement and newElement.mode==2 do\nnewElement=newElement.select[direction]if newElement and newElement:isType(\"selectionGroup\")then\nnewElement=newElement.current\nend\nend\nif newElement then\nif newElement:isType(\"selectionGroup\")or not currentGroup:hasElement(newElement)then\nself:select(newElement,\"key\",3)elseif currentGroup:callListener(\"selection_change\",\"key\",currentElement,newElement)then\ncurrentElement:changeMode(1)currentGroup.current=newElement\nnewElement:changeMode(3)end\nend\nend\nelse\nif currentGroup:callListener(\"selection_reselect\",\"key\",currentElement)then\ncurrentGroup.current:changeMode(3)end\nend\nelse\nif event.param1==15 or event.param1==18 then\nif currentGroup.next then\nself:select(currentGroup.next,\"key\",3)end\nelseif event.param1==16 then\nif currentGroup.previous then\nself:select(currentGroup.previous,\"key\",3)end\nend\nend\nelseif event.name==\"key_up\"then\nself.repeatItem:reset()if self.current then\nself.current:callListener(\"key_up\",\"key\",event.param1)end\nend\nend\nfunction this:mouseEvent(event,element)if not self.current or not self.current:callListener(\"mouse\",\"mouse\",event)or event.name~=\"mouse_click\"then\nreturn\nend\nif element then\nself:select(element,\"mouse\",0)else\nself:deselect(\"mouse\")end\nend\nfunction this:addGroup(group)table.insert(self.groups,group)end\nfunction this:addNewGroup(previous,next,listener)local group=ui.selectionGroup.new(previous,next,listener)table.insert(self.groups,group)return group\nend\nfunction this:removeGroup(group)for k,v in pairs(self.groups)do\nif v==group then\nself.current=group.previous or group.next\ntable.removeAt(self.groups,k)return\nend\nend\nend\nreturn this\nend\n",["os/api/ui/repeatItem.lua"] = "ui.repeatItem= {}function ui.repeatItem.new(startRepeatSpeed,endRepeatSpeed,repeatSpeedIncrement)local this= {_lastPressTime= -1,_currentRepeatSpeed=startRepeatSpeed,startRepeatSpeed=startRepeatSpeed,endRepeatSpeed=endRepeatSpeed,repeatSpeedIncrement=repeatSpeedIncrement}function this:reset()self._lastPressTime= -1\nself._currentRepeatSpeed=self.startRepeatSpeed\nend\nfunction this:call()if self._lastPressTime== -1 then\nself._lastPressTime=os.clock()else\nif os.clock() -self._lastPressTime>self._currentRepeatSpeed then\nself._currentRepeatSpeed=math.max(self._currentRepeatSpeed*self.repeatSpeedIncrement,self.endRepeatSpeed)self._lastPressTime=os.clock()else\nreturn false\nend\nend\nreturn true\nend\nreturn this\nend\n",["os/api/ui/event.lua"] = "ui.event= {}function ui.event.new()local this= {param1=nil,param2=nil,param3=nil,param4=nil,param5=nil}this.name=nil\nfunction this:getUnpacked()return self.name,self.param1,self.param2,self.param3,self.param4,self.param5\nend\nfunction this:pull(name)self.name,self.param1,self.param2,self.param3,self.param4,self.param5=os.pullEvent(name)end\nfunction this:pullRaw(name)self.name,self.param1,self.param2,self.param3,self.param4,self.param5=os.pullRawEvent(name)end\nreturn this\nend\n",["os/api/ui/parallelManager.lua"] = "ui.parallelManager= {}function ui.parallelManager.new()local this= {}this._parallelElements= {}this._stop=true\nfunction this:addFunction(func,data)if type(func) ==\"table\"then\nfor i=1, #self._parallelElements do\nif self._parallelElements==func then\nreturn\nend\nend\nfunc.executer=self\nif data then\nfunc.data=data\nend\ntable.insert(self._parallelElements,func)else\nfor i=1, #self._parallelElements do\nif self._parallelElements.func==func then\nreturn\nend\nend\nlocal parallelElement=ui.parallelElement.new(func,data)parallelElement.executer=self\ntable.insert(self._parallelElements,parallelElement)end\nself:stop()end\nfunction this:removeFunction(func)if type(func) ==\"table\"then\nfor i=1, #self._parallelElements do\nif self._parallelElements[i] ==func then\ntable.remove(self._parallelElements,i)self:stop()return true\nend\nend\nelse\nfor i=1, #self._parallelElements do\nif self._parallelElements[i]._func==func then\ntable.remove(self._parallelElements,i)self:stop()return true\nend\nend\nend\nreturn false\nend\nfunction this._waitForChange()while this._stop==false do\ncoroutine.yield()end\nend\nfunction this:init()self._stop=false\nlocal functions= {}for i=1, #self._parallelElements do\ntable.insert(functions,self._parallelElements[i].init)end\ntable.insert(functions,self._waitForChange)parallel.waitForAny(table.unpack(functions))end\nfunction this:stop()self._stop=true\nend\nfunction this:isRunning()return self._stop==false\nend\nreturn this\nend\n",["os/sys/explorer/extensions/file"] = "return{{\"-\",\" \",\"-\"}, {colors.white,colors.black,colors.gray}, {colors.lightGray,colors.lightGray,colors.lightGray}}\n",["os/api/ui/element.lua"] = "ui.element= {}function ui.element.new(parent,name,x,y,w,h,key)local this=class.new(\"element\")if not name==false then\nthis:_addType(name)end\nthis.isVisible=true\nthis.mode=1\nthis.buffer=ui.buffer.new(x,y,w,h)this.element= {}this._parent=nil\nthis.maskPadding=nil\nthis.select= {}function this:changeMode(mode,overwriteDeselection)if mode>0 and self.mode~=mode and(overwriteDeselection or self.mode~=2)then\nself.mode=mode\nif not self._inAnimation then\nself:recalculate()self:repaint(\"this\")end\nend\nend\nfunction this:setParent(element,key)if element==self then\nreturn false\nend\nif element and self:containsElement(element,true)then\nreturn false\nend\nif self._parent then\nfor k,v in pairs(self._parent.element)do\nif v==self then\ntable.removeAt(self._parent.element,k)break\nend\nend\nend\nself._parent=element\nif element then\nif key then\nif type(key) ==\"number\"then\ntable.insert(element.element,key,self)else\nelement.element[key] =self\nend\nelse\ntable.insert(element.element,self)end\nelse\nself._parent=nil\nend\nreturn true\nend\nfunction this:getParent()return self._parent\nend\nfunction this:containsElement(element,checkChildren)for k,v in pairs(self.element)do\nif v==element then\nreturn true\nend\nif checkChildren and v:containsElement(element)then\nreturn true\nend\nend\nreturn false\nend\nfunction this:getManager()if self._parent then\nreturn self._parent:getManager()else\nreturn self\nend\nend\nfunction this:getGlobalRect()return self.buffer.rect:getUnpacked()end\nfunction this:getGlobalPosX()return self.buffer.rect.x\nend\nfunction this:getGlobalPosY()return self.buffer.rect.y\nend\nfunction this:getLocalRect()return self:getLocalPosX(),self:getLocalPosY(),self.buffer.rect.w,self.buffer.rect.h\nend\nfunction this:getLocalPosX()if self._parent then\nreturn self.buffer.rect.x-self._parent.buffer.rect.x+1\nend\nreturn self.buffer.rect.x\nend\nfunction this:getLocalPosY()if self._parent then\nreturn self.buffer.rect.y-self._parent.buffer.rect.y+1\nend\nreturn self.buffer.rect.y\nend\nfunction this:getWidth()return self.buffer.rect.w\nend\nfunction this:getHeight()return self.buffer.rect.h\nend\nfunction this:setGlobalRect(x,y,w,h)local rectX,rectY=self:getGlobalRect()self:setLocalRect((x or rectX) -rectX, (y or rectY) -rectY,w,h)end\nfunction this:setLocalRect(x,y,w,h)x=x or 0\ny=y or 0\nself.buffer.rect:set(x+self:getGlobalPosX(),y+self:getGlobalPosY(),w,h)for k,v in pairs(self.element)do\nv:setLocalRect(x,y,nil,nil)end\nend\nfunction this:getCompleteMaskRect(x,y,w,h)local possible=true\nif self._parent then\nx,y,w,h,possible=self._parent:getCompleteMaskRect(x,y,w,h)if possible==false then\nreturn x,y,w,h,possible\nend\nend\nif self.maskPadding then\nif x then\nreturn ui.rect.overlaps(x,y,w,h,self.maskPadding:getPaddedRect(self.buffer.rect:getUnpacked()))else\nx,y,w,h=self.maskPadding:getPaddedRect(self.buffer.rect:getUnpacked())return x,y,w,h,true\nend\nelse\nif x then\nreturn self.buffer.rect:getOverlaps(x,y,w,h)else\nx,y,w,h=self.buffer.rect:getUnpacked()return x,y,w,h,true\nend\nend\nend\nfunction this:getSimpleMaskRect(x,y,w,h)if self.maskPadding then\nif x then\nreturn ui.rect.overlaps(x,y,w,h,self.maskPadding:getPaddedRect(self.buffer.rect:getUnpacked()))else\nreturn self.maskPadding:getPaddedRect(self.buffer.rect:getUnpacked())end\nelse\nif x then\nreturn self.buffer.rect:getOverlaps(x,y,w,h)else\nreturn self.buffer.rect:getUnpacked()end\nend\nend\nfunction this:doDraw(buffer,x,y,w,h)if x==nil then\nx,y,w,h=self.buffer.rect:getUnpacked()end\nif self.isVisible then\nbuffer:contract(self.buffer,x,y,w,h)if self.element==0 then\nreturn\nend\nlocal possible=true\nx,y,w,h,possible=ui.rect.overlaps(x,y,w,h,self:getCompleteMaskRect())if possible then\nfor k,v in pairs(self.element)do\nv:doDraw(buffer,x,y,w,h)end\nend\nend\nend\nfunction this:repaint(mode,x,y,w,h)if mode==\"this\"then\nif x and false then\nx=x+1\ny=y+1\nw=w-2\nh=h-2\nend\nx,y,w,h=self:getCompleteMaskRect(x,y,w,h)local manager=self:getManager()self:doDraw(manager.buffer,x,y,w,h)manager.buffer:draw(x,y,w,h)elseif mode==\"parent\"then\nif self._parent then\nself._parent:repaint(\"this\",x,y,w,h)end\nelseif mode==\"all\"then\nself:getManager():repaint(\"this\",x,y,w,h)else\nerror(\"given mode (\" ..mode..\") is not supported\",2)end\nend\nfunction this:doPointerEvent(event,x,y,w,h)local maskX,maskY,maskW,maskH,possible=self:getSimpleMaskRect(x,y,w,h)if possible then\nfor k,v in pairs(self.element)do\nlocal e=v:doPointerEvent(event,maskX,maskY,maskW,maskH)if e then\nreturn e\nend\nend\nend\nif self.mode~=2 then\nreturn self:pointerEvent(event,x,y,w,h)end\nend\nfunction this:doNormalEvent(event)for k,v in pairs(self.element)do\nlocal e=v:doNormalEvent(event)if e then\nreturn e\nend\nend\nif self.mode~=2 then\nreturn self:normalEvent(event)end\nend\nfunction this:pointerEvent(event,x,y,w,h)return nil\nend\nfunction this:normalEvent(event)return nil\nend\nfunction this:recalculate()end\nthis:setParent(parent,key)return this\nend\n",["os/sys/infoBox.lua"] = "local set= ...local x,y,w,h\nif set.x then\nx=set.x\ny=set.y\nw=set.w\nh=set.h\nelse\nx,y=1,1\nw,h=term.getSize()end\ntable.checkType(set,\"x\",\"number\",false)table.checkType(set,\"y\",\"number\",false)table.checkType(set,\"w\",\"number\",false)table.checkType(set,\"h\",\"number\",false)table.checkType(set,\"text\",\"string\",true)table.checkType(set,\"label\",\"string\",false)table.checkType(set,\"select\",\"boolean\",true)table.checkType(set,\"tBoxT\",\"table\",true,theme.tBox1)table.checkType(set,\"buttonT\",\"table\",true,theme.button1)table.checkType(set,\"button1\",\"string\",true)table.checkType(set,\"button2\",\"string\",false)local manager=ui.uiManager.new(x,y,w,h)local textBox=ui.textBox.new(manager,set.label,set.text,set.tBoxT,x,y,w,h)local left= #textBox.style.nTheme.b[4]local top= #textBox.style.nTheme.b[2]local right= #textBox.style.nTheme.b[6]local bottom= #textBox.style.nTheme.b[8]local select=set.select\nlocal ret\nif not set.button1 then\nset.button1=set.button2\nset.button2=nil\nend\nlocal button1,button2\nif set.button1 then\nlocal length=set.button1:len() +2\nbutton1=ui.button.new(textBox,set.button1,set.buttonT or theme.button1,x+w-right-1-length,y+h-math.floor(bottom/2) -1,length,1)function button1:onClick(event)ret=1\nselect=event.name~=\"mouse_up\"manager:exit()end\ntextBox.selectionGroup:addElement(button1)end\nif set.button2 then\nlocal length=set.button2:len() +2\nbutton2=ui.button.new(textBox,set.button2,set.buttonT or theme.button1,x+left+1,y+h-math.floor(bottom/2) -1,length,1)function button2:onClick(event)ret=2\nselect=event.name~=\"mouse_up\"manager:exit()end\ntextBox.selectionGroup:addElement(button2,nil,nil,button1,nil,true)end\nmanager.selectionManager:addGroup(textBox.selectionGroup)local mode=3\nif set.select==false then\nmode=1\nend\nmanager.selectionManager:select(button1,\"code\",mode)manager:draw()manager:execute()return ret,select\n",["os/init.lua"] = "local function loadAPIs(dir)local apiFiles=fs.list(dir)for i=1, #apiFiles do\nlocal path=dir..\"/\" ..apiFiles[i]if fs.isDir(path) ==false then\ndofile(path)else\nloadAPIs(path)end\nend\nend\nloadAPIs(\"os/api\")local _\n_,_G.theme=ui.theme.load(\"main.lua\")_G.shell=shell\nif not fs.exists(\"os/programs\")then\nfs.makeDir(\"os/programs\")end\nif not fs.exists(\"os/startup\")then\nfs.makeDir(\"os/startup\")end\n" }) do
local s, e = key:find(".*/")
if s then
local path = key:sub(s, e)
if not fs.exists(path) then
fs.makeDir(path)
end
end
local file = io.open(key, "w+")
file:write(value)
file:close()
end
dofile("os/init.lua")callfile("os/sys/browser/require.lua","Main Theme")os.reboot()